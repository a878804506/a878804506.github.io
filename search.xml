<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据教程(五)-yarn的环境配置</title>
      <link href="/2020/03/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%BA%94)-yarn%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%BA%94)-yarn%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><blockquote><ol><li>yarn的快速理解；</li><li>yarn的安装位置解析；</li><li>yarn配置文件与启动；</li><li>yarn配置说明；</li></ol></blockquote><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><blockquote><ol><li>yarn是在hadoop安装包里面启动，所以版本跟hadoop的版本一致；</li><li>linux系统：CentOS 7.2；</li></ol></blockquote><h3 id="三、yarn的快速理解"><a href="#三、yarn的快速理解" class="headerlink" title="三、yarn的快速理解"></a>三、yarn的快速理解</h3><p>&#160; &#160;yarn是一个分布式程序的运行调度平台<br>&#160; &#160;yarn中有两大核心角色：</p><ol><li>主节点：<strong>Resource Manager</strong>  &#160;(<strong><font color="red">1</font></strong>台)<br>接受用户提交的分布式计算程序，并为其划分资源；管理、监控各个Node Manager上的资源情况，以便于均衡负载；<br>Resource Manager一般安装在一台专门的机器上</li><li>从节点：<strong>Node Manager</strong> &#160;(<strong><font color="red">N</font></strong>台)<br>管理它所在机器的运算资源（cpu + 内存）；负责接受Resource Manager分配的任务，创建容器、回收资源；<br>Node Manager应该与HDFS中的data node重叠在一起，Node Manager启动多少台是根据在<code>$HADOOP_HOME/etc/hadoop/workers</code> 里面配置的信息</li></ol><h3 id="四、yarn的安装位置解析"><a href="#四、yarn的安装位置解析" class="headerlink" title="四、yarn的安装位置解析"></a>四、yarn的安装位置解析</h3><p>&#160;&#160;yarn如3.2所述，在结合我的机器现有部署的程序，我的master启动的是NameNode、DataNode，slave1、slave2启动的是DataNode，所以yarn的NodeManager节点应该安装在master、slave1、slave2上，理论上ResourceManager应该单独一台服务器部署，但是在我这，我就把yarn的主节点安装在master，方便管理(主要是服务器不够用)<br>&#160;&#160;yarn最终yarn的部署方案如下：</p><table><thead><tr><th align="center">服务器</th><th align="center">部署yarn节点</th></tr></thead><tbody><tr><td align="center">master</td><td align="center">Resource Manager、DataNode</td></tr><tr><td align="center">slave1</td><td align="center">DataNode</td></tr><tr><td align="center">slave2</td><td align="center">DataNode</td></tr></tbody></table><h3 id="五、yarn配置文件与启动"><a href="#五、yarn配置文件与启动" class="headerlink" title="五、yarn配置文件与启动"></a>五、yarn配置文件与启动</h3><ol><li><p>修改配置文件：编辑<code>$HADOOP_HOME/etc/hadoop/yarn-site.xml</code>，增加以下内容</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.cpu-vcores<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><p>保存好yarn-site.xml后，将该文件复制到slave1、slave2的目录下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#复制到slave1</span><span class="token function">scp</span> /usr/local/hadoop-3.2.1/etc/hadoop/yarn-site.xml root@slave1:/usr/local/hadoop-3.2.1/etc/hadoop/<span class="token comment" spellcheck="true">#复制到slave2</span><span class="token function">scp</span> /usr/local/hadoop-3.2.1/etc/hadoop/yarn-site.xml root@slave2:/usr/local/hadoop-3.2.1/etc/hadoop/</code></pre></li><li><p>启动yarn：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#随便那台机器上执行：</span><span class="token variable">$HADOOP_HOME</span>/sbin/start-yarn.sh</code></pre></li></ol><h3 id="六、yarn配置说明"><a href="#六、yarn配置说明" class="headerlink" title="六、yarn配置说明"></a>六、yarn配置说明</h3><ol><li><p>关于Node Manager启动的数量是跟文件workers里面配置的信息相关；</p></li><li><p>Resource Manager节点则是在配置文件中yarn.resourcemanager.hostname配置项相关；</p></li><li><p>默认的为Node Manager分配的运行内存是8G，配置项是yarn.nodemanager.resource.memory-mb，这个参数要根据实际机器的性能进行变换；</p></li><li><p>默认的为Node Manager分配的逻辑cpu是8核，配置项是yarn.nodemanager.resource.cpu-vcores</p></li><li><p>默认的web访问端口是8088，比如我的yarn启动后，页面访问路径是：<code>http://192.168.6.100:8088</code>可通过如下配置进行修改：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>${yarn.resourcemanager.hostname}:8089<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><p>yarn的配置项的详细说明在如下地方：</p><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20200308/6.1.png" align="left/"><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20200308/6.2.png" align="left/"></li><li><p>yarn的官方配置文档：hadoop官方网站：<a href="https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-common/yarn-default.xml" title="yarn" target="_blank" rel="noopener"><strong>yarn官方配置文档</strong></a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据教程(四)-安装mysql</title>
      <link href="/2020/03/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E5%9B%9B)-%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2020/03/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E5%9B%9B)-%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><blockquote><ol><li>准备mysql安装包；</li><li>创建mysql用户和组；</li><li>解压安装包；</li><li>配置my.cnf；</li><li>修改当前目录拥有者为mysql用户；</li><li>mysql初始化；</li><li>复制启动脚本到资源目录；</li><li>配置环境变量；</li><li>启动mysql服务；</li><li>登录mysql 修改密码；</li><li>开启远程访问；</li><li>将mysqld服务加入到系统服务（开机自启）；</li></ol></blockquote><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><blockquote><ol><li>mysql版本：mysql-5.6.39；</li><li>linux系统：CentOS 7.2；</li><li>mysql我是安装在slave2(192.168.6.102)上，mysql只是作为hive内部使用，装在哪里都可以；</li></ol></blockquote><h3 id="三、准备mysql安装包"><a href="#三、准备mysql安装包" class="headerlink" title="三、准备mysql安装包"></a>三、准备mysql安装包</h3><p>&#160; &#160;<a href="https://pan.baidu.com/s/1TMCOOBR6shKot0sOHYa_hA" title="点击下载" target="_blank" rel="noopener"><strong><font color="purple">百度网盘下载mysql-5.6.39-linux-glibc2.12-x86_64</font></strong></a><br>&#160; &#160;提取码：4i3m</p><h3 id="四、创建mysql用户和组"><a href="#四、创建mysql用户和组" class="headerlink" title="四、创建mysql用户和组"></a>四、创建mysql用户和组</h3><p>执行以下命令来创建mysql用户组</p><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> mysql</code></pre><p>执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组</p><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> -g mysql mysql</code></pre><h3 id="五、解压安装包"><a href="#五、解压安装包" class="headerlink" title="五、解压安装包"></a>五、解压安装包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf mysql-5.6.39-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</code></pre><h3 id="六、创建并配置my-cnf"><a href="#六、创建并配置my-cnf" class="headerlink" title="六、创建并配置my.cnf"></a>六、创建并配置my.cnf</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> /etc/my.cnf <span class="token operator">&amp;&amp;</span> vim /etc/my.cnf<span class="token comment" spellcheck="true"># 将下面这一段编辑到my.cnf文件中</span></code></pre><pre class=" language-txt"><code class="language-txt">[mysql]# 设置mysql客户端默认字符集default-character-set=utf8socket=/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/data/mysql.sock[mysqld]#设置3306端口port=3306socket=/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/data/mysql.sock# 设置mysql的安装目录basedir=/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64# 设置mysql数据库的数据的存放目录datadir=/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/data# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODBlower_case_table_names=1max_allowed_packet=16M[client]socket=/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/data/mysql.sock</code></pre><h3 id="七、修改当前目录拥有者为mysql用户"><a href="#七、修改当前目录拥有者为mysql用户" class="headerlink" title="七、修改当前目录拥有者为mysql用户"></a>七、修改当前目录拥有者为mysql用户</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/mysql-5.6.39-linux-glibc2.12-x86_64<span class="token function">chown</span> -R mysql:mysql /usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/</code></pre><h3 id="八、mysql初始化"><a href="#八、mysql初始化" class="headerlink" title="八、mysql初始化"></a>八、mysql初始化</h3><p>&#160;&#160;如果是mysql5.6 初始化命令是  </p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 我安装的是5.6，所以执行这一句</span>./scripts/mysql_install_db --user<span class="token operator">=</span>mysql</code></pre><p>&#160;&#160;mysql5.6初始化时会<font color="red">报错</font>：</p><pre class=" language-bash"><code class="language-bash">FATAL ERROR: please <span class="token function">install</span> the following Perl modules before executing ./scripts/mysql_install_db:Data::Dumper</code></pre><p>&#160;&#160;<font color="green">解决方案：</font><br>&#160;&#160;安装autoconf库，命令：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y autoconf   //此包安装时会安装Data:Dumper模块</code></pre><p>&#160;&#160;安装完了之后在执行 <code>./scripts/mysql_install_db --user=mysql</code></p><p>&#160;&#160;如果是mysql5.7 初始化命令是  </p><pre class=" language-bash"><code class="language-bash">bin/mysqld --user<span class="token operator">=</span>mysql --initialize</code></pre><h3 id="九、复制启动脚本到资源目录"><a href="#九、复制启动脚本到资源目录" class="headerlink" title="九、复制启动脚本到资源目录"></a>九、复制启动脚本到资源目录</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> ./support-files/mysql.server /etc/rc.d/init.d/mysqld</code></pre><h3 id="十、配置环境变量"><a href="#十、配置环境变量" class="headerlink" title="十、配置环境变量"></a>十、配置环境变量</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将mysql的bin目录加入PATH环境变量</span><span class="token comment" spellcheck="true">#编辑/etc/profile文件</span>vim /etc/profile<span class="token comment" spellcheck="true">#在文件最后添加如下信息：</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/mysql-5.6.39-linux-glibc2.12-x86_64/bin<span class="token comment" spellcheck="true">#执行下面的命令使所做的更改生效：</span><span class="token function">source</span> /etc/profile</code></pre><h3 id="十一、启动mysql服务"><a href="#十一、启动mysql服务" class="headerlink" title="十一、启动mysql服务"></a>十一、启动mysql服务</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mysqld start</code></pre><h3 id="十二、登录mysql-修改密码"><a href="#十二、登录mysql-修改密码" class="headerlink" title="十二、登录mysql 修改密码"></a>十二、登录mysql 修改密码</h3><pre class=" language-bash"><code class="language-bash">mysql -u root</code></pre><p>&#160;&#160;进入到mysql命令窗口后逐条执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#切换database</span>mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#修改密码为123456</span>mysql<span class="token operator">></span> UPDATE user SET Password<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where USER<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#刷新权限  </span>mysql<span class="token operator">></span> FLUSH PRIVILEGES<span class="token punctuation">;</span> </code></pre><h3 id="十三、开启远程访问"><a href="#十三、开启远程访问" class="headerlink" title="十三、开启远程访问"></a>十三、开启远程访问</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#mysql命令行执行：开启远程访问（默认mysql是不开启远程访问）</span>mysql<span class="token operator">></span> grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#本句命令含义：远程访问用户为root，用户权限为全部database的全部操作类型（crud），远程密码为123456，本地登录密码和远程访问用户的密码可以不同</span></code></pre><h3 id="十四、将mysqld服务加入到系统服务（开机自启）"><a href="#十四、将mysqld服务加入到系统服务（开机自启）" class="headerlink" title="十四、将mysqld服务加入到系统服务（开机自启）"></a>十四、将mysqld服务加入到系统服务（开机自启）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">chkconfig</span> --add mysqld</code></pre><p>&#160;&#160;检查mysqld服务是否已经生效</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chkconfig</span> --list mysqld</code></pre><p>&#160;&#160;命令输出类似下面的结果：<br>&#160;&#160;<font color="green">mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off</font><br>&#160;&#160;表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data JPA 学习总结与实战(一)-接口源码详解</title>
      <link href="/2020/01/09/Spring-Data-JPA-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E6%88%98(%E4%B8%80)-%E6%8E%A5%E5%8F%A3%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/01/09/Spring-Data-JPA-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E6%88%98(%E4%B8%80)-%E6%8E%A5%E5%8F%A3%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ol><li>在17年的时候，我参与了一个项目用的就是spring data jpa，那时候对hebernate不是很了解（因为我一直都是用的mybatis），稀里糊涂的做着需求，好在spring data jpa入门还是很容易的，特别的简单查询，就这样在百度中参与进那个项目的开发中；现在刚好有点时间可以学一学，就总结一下我的学习成果。</li><li>本系列文章是我在学习了《Spring data JPA从入门到精通》之后的总结；最后一篇系列文章将会有我写的例子作为实战，来检验一下自己的学习成果。</li><li><a href="http://staticfile.erdongchen.top/download/Spring-Data-JPA从入门到精通.pdf?n=Spring_data_JPA从入门到精通.pdf" title="点击下载" target="_blank" rel="noopener"><strong><font color="purple">《Spring data JPA从入门到精通》电子书下载</font></strong></a></li></ol><h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>顶级接口Repostitory介绍及层级关系；</li><li>CrudRepository接口方法详解；</li><li>PagingAndSortingRepository接口方法详解；</li><li>JpaRepository接口方法详解；</li><li>Repository的实现类SimpleJpaRepository介绍；</li><li>自定义查询方法命名规则；</li><li>查询方法关键字；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>spring boot 版本：2.1.1.RELEASE；</li><li>Spring Data JPA 版本：2.1.3.RELEASE；</li></ol><h3 id="三、顶级接口Repostitory介绍及层级关系"><a href="#三、顶级接口Repostitory介绍及层级关系" class="headerlink" title="三、顶级接口Repostitory介绍及层级关系"></a>三、顶级接口Repostitory介绍及层级关系</h3><ol><li><p>首先要知道jpa是一种规范，hebernate是jpa的一种实现，Spring Data JPA底层用的还是hebernate，Spring Data JPA 是Spring Data的一个子项目。它依赖了Spring Data Common包,而接口Repostitory也是位于Spring Data Common的lib里面的，是Spring Data里面做数据库操作的最底层的抽象接口、 最顶级的父类， 源码里面其实什么方法都没有， 仅仅起到一个标识作用。<br>Repostitory的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Indexed<span class="token punctuation">;</span><span class="token annotation punctuation">@Indexed</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>我们可以利用Idea来查看Repostitory的层级关系，具体如下：<br>①. 打开Repository.class，该接口位于org.springframework.data.repository包下；<br>②. 快捷键Ctrl+H，如图所示：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20200109/3.1.png" align="left/"></li></ol><h3 id="四、CrudRepository接口方法详解"><a href="#四、CrudRepository接口方法详解" class="headerlink" title="四、CrudRepository接口方法详解"></a>四、CrudRepository接口方法详解</h3><ol><li><p>CrudRepository的源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> S <span class="token function">save</span><span class="token punctuation">(</span>S entity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> Iterable<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token function">saveAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>S<span class="token operator">></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量保存</span> Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span>ID id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">boolean</span> <span class="token function">existsById</span><span class="token punctuation">(</span>ID id<span class="token punctuation">)</span><span class="token punctuation">;</span> Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAllById</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>ID<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算对象总个数</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>ID id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>该接口主要是完成一些增删改查的操作，例如查看save(S entity)方法的具体实现，快捷键Ctrl+Alt+鼠标点击方法名save；可以看到底层实现（实现类是SimpleJpaRepository）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> S <span class="token function">save</span><span class="token punctuation">(</span>S entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>entityInformation<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      em<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> entity<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> em<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>我们发现它是先检查传进去的实体是不是存在， 然后判断是新增还是更新； 是不是存在两种根据机制， 一种是根据主键来判断， 另一种是根据Version来判断。如果我们去看JPA控制台打印出来的SQL， 最少会有两条， 一条是查询， 一条是insert或者update。类似的删除方法也是一样的，程序会先判断存不存在，再去删除，所以这里特别强调一下delete和save方法， 因为在实际工作中有的人会画蛇添足， 自己先去查询再做判断处理， 其实Spring JPA底层都已经考虑到了。</p></li></ol><h3 id="五、PagingAndSortingRepository接口方法详解"><a href="#五、PagingAndSortingRepository接口方法详解" class="headerlink" title="五、PagingAndSortingRepository接口方法详解"></a>五、PagingAndSortingRepository接口方法详解</h3><ol><li><p>话不多说，先上源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Pageable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span> Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span> Page<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分页并排序</span><span class="token punctuation">}</span></code></pre></li><li><p>findAll(Pageable pageable)方法根据分页和排序进行查询， 并用Page对象封装。 Pageable对象包含分页和Sort对象。PagingAndSortingRepository和CrudRepository都是Spring Data   Common的标准接口， 如果我们采用JPA， 那它对应的实现类就是Spring Data JPA的model里面的SimpleJpaRepository。</p></li></ol><h3 id="六、JpaRepository接口方法详解"><a href="#六、JpaRepository接口方法详解" class="headerlink" title="六、JpaRepository接口方法详解"></a>六、JpaRepository接口方法详解</h3><ol><li><p>JpaRepository源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>EntityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Example<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Sort<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>NoRepositoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>PagingAndSortingRepository<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryByExampleExecutor<span class="token punctuation">;</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span><span class="token punctuation">,</span> QueryByExampleExecutor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAllById</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>ID<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> List<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token function">saveAll</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>S<span class="token operator">></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制缓存与数据库同步</span>  <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> S <span class="token function">saveAndFlush</span><span class="token punctuation">(</span>S entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">deleteInBatch</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存并强制同步数据库</span>  <span class="token keyword">void</span> <span class="token function">deleteAllInBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  T <span class="token function">getOne</span><span class="token punctuation">(</span>ID id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> List<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Example<span class="token operator">&lt;</span>S<span class="token operator">></span> example<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据实例查询</span>  <span class="token annotation punctuation">@Override</span>  <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> List<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Example<span class="token operator">&lt;</span>S<span class="token operator">></span> example<span class="token punctuation">,</span> Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据实例查询并排序</span><span class="token punctuation">}</span></code></pre></li><li><p>通过源码和CrudRepository相比较， 它支持Query By Example，批量删除， 提高删除效率， 手动刷新数据库的更改方法， 并将默认实现的查询结果变成了List。</p></li></ol><h3 id="七、Repository的实现类SimpleJpaRepository介绍"><a href="#七、Repository的实现类SimpleJpaRepository介绍" class="headerlink" title="七、Repository的实现类SimpleJpaRepository介绍"></a>七、Repository的实现类SimpleJpaRepository介绍</h3><ol><li>源码太多了，略过；首先看一下SimpleJpaRepository的类构图<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20200109/7.1.png" align="left/"></li><li>①. SimpleJpaRepository实现了JpaRepositoryImplementation接口，它是CrudRepository的默认实现；它的构造器都要求传入EntityManager<br>②. 它的类上注解了@Transactional(readOnly = true)；而对deleteById、delete、deleteAll、deleteInBatch、deleteAllInBatch、save、saveAndFlush、saveAll、flush都添加了@Transactional注解<br>③. 从各个方法的实现可以看到SimpleJpaRepository是使用EntityManager来完成具体的方法功能，对于查询功能很多都借助了applySpecificationToCriteria方法，将spring data的Specification转换为javax.persistence的CriteriaQuery</li></ol><h3 id="八、自定义查询方法命名规则；"><a href="#八、自定义查询方法命名规则；" class="headerlink" title="八、自定义查询方法命名规则；"></a>八、自定义查询方法命名规则；</h3><ol><li>主要接口看完了，除了上述接口中自带的方法外，日常开发中还需用到其他的查询，如根据名称查询，模糊查询，日期区间查询等等，具体如下：</li><li>例如我有个业务接口叫StudentRepository继承自JpaRepository接口；那么我就可以在这个业务接口里面定义一个方法<code>List&lt;Student&gt; findByNameLike(String name);</code>，按照一定的规则去命名接口，Spring Data JPA 就会自动根据方法名称去生成sql，返回数据，怎么样？很吊吧？</li><li>查看org.springframework.data.repository.query.parser.PartTree源码可以看到，Spring Data JPA 在解析业务接口的时候不光是find能解析成查询语句，还有read|get|query|stream都可以作为前缀<pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUERY_PATTERN <span class="token operator">=</span> <span class="token string">"find|read|get|query|stream"</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String COUNT_PATTERN <span class="token operator">=</span> <span class="token string">"count"</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXISTS_PATTERN <span class="token operator">=</span> <span class="token string">"exists"</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELETE_PATTERN <span class="token operator">=</span> <span class="token string">"delete|remove"</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="九、查询方法关键字；"><a href="#九、查询方法关键字；" class="headerlink" title="九、查询方法关键字；"></a>九、查询方法关键字；</h3><p> 最后附上一份接口方法命名规则：</p><table><thead><tr><th align="center">序号</th><th align="center">关键字</th><th align="center">SQL符号</th><th align="center">方法命名样例</th><th align="center">对应JPQL语句片段</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">And</td><td align="center">and</td><td align="center">findByLastnameAndFirstname</td><td align="center">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td align="center">2</td><td align="center">Or</td><td align="center">or</td><td align="center">findByLastnameOrFirstname</td><td align="center">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td align="center">3</td><td align="center">Is,Equals</td><td align="center">=</td><td align="center">findByFirstname,findByFirstnameIs</td><td align="center">… where x.firstname = ?1</td></tr><tr><td align="center">4</td><td align="center">Between</td><td align="center">between xxx and xxx</td><td align="center">findByStartDateBetween</td><td align="center">… where x.startDate between ?1 and ?2</td></tr><tr><td align="center">5</td><td align="center">LessThan</td><td align="center">&lt;</td><td align="center">findByAgeLessThan</td><td align="center">… where x.age &lt; ?1</td></tr><tr><td align="center">6</td><td align="center">LessThanEqual</td><td align="center">&lt;=</td><td align="center">findByAgeLessThanEqual</td><td align="center">… where x.age &lt;= ?1</td></tr><tr><td align="center">7</td><td align="center">GreaterThan</td><td align="center">&gt;</td><td align="center">findByAgeGreaterThan</td><td align="center">… where x.age &gt; ?1</td></tr><tr><td align="center">8</td><td align="center">GreaterThanEqual</td><td align="center">&gt;=</td><td align="center">findByAgeGreaterThanEqual</td><td align="center">… where x.age &gt;= ?1</td></tr><tr><td align="center">9</td><td align="center">After</td><td align="center">&gt;</td><td align="center">findByStartDateAfter</td><td align="center">… where x.startDate &gt; ?1</td></tr><tr><td align="center">10</td><td align="center">Before</td><td align="center">&lt;</td><td align="center">findByStartDateBefore</td><td align="center">… where x.startDate &lt; ?1</td></tr><tr><td align="center">11</td><td align="center">IsNull</td><td align="center">is null</td><td align="center">findByAgeIsNull</td><td align="center">… where x.age is null</td></tr><tr><td align="center">12</td><td align="center">IsNotNull,NotNull</td><td align="center">is not null</td><td align="center">findByAge(Is)NotNull</td><td align="center">… where x.age not null</td></tr><tr><td align="center">13</td><td align="center">Like</td><td align="center">like</td><td align="center">findByFirstnameLike</td><td align="center">… where x.firstname like ?1</td></tr><tr><td align="center">14</td><td align="center">NotLike</td><td align="center">not like</td><td align="center">findByFirstnameNotLike</td><td align="center">… where x.firstname not like ?1</td></tr><tr><td align="center">15</td><td align="center">StartingWith</td><td align="center">like ‘xxx%’</td><td align="center">findByFirstnameStartingWith</td><td align="center">… where x.firstname like ?1(parameter bound with appended %)</td></tr><tr><td align="center">16</td><td align="center">EndingWith</td><td align="center">like ‘xxx%’</td><td align="center">findByFirstnameEndingWith</td><td align="center">… where x.firstname like ?1(parameter bound with prepended %)</td></tr><tr><td align="center">17</td><td align="center">Containing</td><td align="center">like ‘%xxx%’</td><td align="center">findByFirstnameContaining</td><td align="center">… where x.firstname like ?1(parameter bound wrapped in %)</td></tr><tr><td align="center">18</td><td align="center">OrderBy</td><td align="center">order by</td><td align="center">findByAgeOrderByLastnameDesc</td><td align="center">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td align="center">19</td><td align="center">Not</td><td align="center">&lt;&gt;</td><td align="center">findByLastnameNot</td><td align="center">… where x.lastname &lt;&gt; ?1</td></tr><tr><td align="center">20</td><td align="center">In</td><td align="center">in()</td><td align="center">findByAgeIn(Collection<age> ages)</age></td><td align="center">… where x.age in ?1</td></tr><tr><td align="center">21</td><td align="center">NotIn</td><td align="center">not in()</td><td align="center">findByAgeNotIn(Collection<age> ages)</age></td><td align="center">… where x.age not in ?1</td></tr><tr><td align="center">22</td><td align="center">TRUE</td><td align="center">=true</td><td align="center">findByActiveTrue()</td><td align="center">… where x.active = true</td></tr><tr><td align="center">23</td><td align="center">FALSE</td><td align="center">=false</td><td align="center">findByActiveFalse()</td><td align="center">… where x.active = false</td></tr><tr><td align="center">24</td><td align="center">IgnoreCase</td><td align="center">upper(xxx)=upper(yyyy)</td><td align="center">findByFirstnameIgnoreCase</td><td align="center">… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring Data JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring全家桶 </tag>
            
            <tag> 框架 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据教程(三)-分布式ZooKeeper的集群搭建</title>
      <link href="/2019/11/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%B8%89)-%E5%88%86%E5%B8%83%E5%BC%8FZooKeeper%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/11/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%B8%89)-%E5%88%86%E5%B8%83%E5%BC%8FZooKeeper%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>机器准备； </li><li>zoo.cfg文件配置；</li><li>集群操作； </li><li>zk常用命令；</li><li>zk选举机制；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>沿用第一篇大数据教程中的环境及软件；</li><li>ZooKeeper安装包版本为：3.5.6</li></ol><h3 id="三、机器准备"><a href="#三、机器准备" class="headerlink" title="三、机器准备"></a>三、机器准备</h3><p>按照第一篇的集群规划，将在slave3、slave4、slave5上部署zk集群</p><ol><li>这三台机器上下载zk安装包：<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.6/apache-zookeeper-3.5.6-bin.tar.gz</code></pre></li><li>解压并改名<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> -xzvf apache-zookeeper-3.5.6-bin.tar.gz -C /usr/local<span class="token comment" spellcheck="true">#改名（有强迫症）</span><span class="token function">mv</span> apache-zookeeper-3.5.6-bin zookeeper-3.5.6</code></pre></li></ol><h3 id="四、zoo-cfg文件配置"><a href="#四、zoo-cfg文件配置" class="headerlink" title="四、zoo.cfg文件配置"></a>四、zoo.cfg文件配置</h3><ol><li><p>zk集群运行需要存储数据到磁盘目录，在zookeeper-3.5.6目录下新建一个目录</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在/usr/local/zookeeper-3.5.6 目录下执行</span><span class="token function">mkdir</span> zkDataDir</code></pre></li><li><p>将conf目录下的zoo_sample.cfg文件复制一份，并重命名为zoo.cfg</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> zoo_sample.cfg zoo.cfg</code></pre></li><li><p>我的配置文件示例</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># The number of milliseconds of each tick</span>tickTime<span class="token operator">=</span>2000<span class="token comment" spellcheck="true"># The number of ticks that the initial </span><span class="token comment" spellcheck="true"># synchronization phase can take</span>initLimit<span class="token operator">=</span>10<span class="token comment" spellcheck="true"># The number of ticks that can pass between </span><span class="token comment" spellcheck="true"># sending a request and getting an acknowledgement</span>syncLimit<span class="token operator">=</span>5<span class="token comment" spellcheck="true"># the directory where the snapshot is stored.</span><span class="token comment" spellcheck="true"># do not use /tmp for storage, /tmp here is just </span><span class="token comment" spellcheck="true"># example sakes.</span>dataDir<span class="token operator">=</span>/usr/local/zookeeper-3.5.6/zkDataDir<span class="token comment" spellcheck="true"># the port at which the clients will connect</span>clientPort<span class="token operator">=</span>2181<span class="token comment" spellcheck="true"># the maximum number of client connections.</span><span class="token comment" spellcheck="true"># increase this if you need to handle more clients</span><span class="token comment" spellcheck="true">#maxClientCnxns=60</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Be sure to read the maintenance section of the </span><span class="token comment" spellcheck="true"># administrator guide before turning on autopurge.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The number of snapshots to retain in dataDir</span><span class="token comment" spellcheck="true">#autopurge.snapRetainCount=3</span><span class="token comment" spellcheck="true"># Purge task interval in hours</span><span class="token comment" spellcheck="true"># Set to "0" to disable auto purge feature</span><span class="token comment" spellcheck="true">#autopurge.purgeInterval=1</span>server.1<span class="token operator">=</span>192.168.6.103:2888:3888server.2<span class="token operator">=</span>192.168.6.104:2888:3888server.3<span class="token operator">=</span>192.168.6.105:2888:3888</code></pre></li><li><p>主要有是修改了数据目录dataDir和最后三行的集群配置，其他用默认就好了</p></li><li><p>最后三行的集群配置解析<br><code>server.1=192.168.6.103:2888:3888</code><br>server.1中的数字1表示这个是第几号服务器；<br>192.168.6.103是这个服务器的ip地址；<br>2888是这个服务器与集群中的Leader服务器交换信息的端口(集群通讯端口)；<br>3888是集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口（选举端口）。</p></li><li><p>在zkDataDir目录中新建一个myid文件（三个服务器都需要此文件），文件内容就是对应服务器的编号，<br>在配置文件中的最后三行配置的server.1是指定192.168.6.103服务器的，所以要在myid文件中写入编号<code>1</code>，在192.168.6.104服务器上myid文件中写入编号<code>2</code>，105服务器上写入<code>3</code></p></li></ol><p><strong><font color="red">防坑</font></strong>：以上步骤除了第6步骤外，集群的其他配置都一样；</p><h3 id="五、集群操作"><a href="#五、集群操作" class="headerlink" title="五、集群操作"></a>五、集群操作</h3><ol><li><p>启动zk：<code>bin/zkServer.sh start</code></p></li><li><p>停止zk：<code>bin/zkServer.sh stop</code></p></li><li><p>重启zk：<code>bin/zkServer.sh restart</code></p></li><li><p>查看状态：<code>bin/zkServer.sh status</code></p></li><li><p>这里我编写了一个shell脚本，可以方便的管理zk集群：<br><strong><font color="green">说明一下</font></strong>：这个脚本可以在master、slave1-5的任意一台机器上运行，但前提是运行该脚本的机器需能够免密登陆到slave3、4、5上</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">'你执行的命令是：'</span><span class="token variable">$1</span><span class="token keyword">for</span> host <span class="token keyword">in</span> slave3 slave4 slave5<span class="token keyword">do</span><span class="token keyword">echo</span> <span class="token string">'开始在'</span><span class="token variable">$host</span>‘上的执行命令’<span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"source /etc/profile;/usr/local/zookeeper-3.5.6/bin/zkServer.sh <span class="token variable">$1</span>"</span><span class="token keyword">echo</span> <span class="token string">'执行完毕！退出'</span><span class="token variable">$host</span><span class="token keyword">done</span></code></pre><p>脚本运行效果：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191128/5.1.png" align="left/"></li></ol><h3 id="六、zk常用命令"><a href="#六、zk常用命令" class="headerlink" title="六、zk常用命令"></a>六、zk常用命令</h3><table><thead><tr><th align="center">序号</th><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">create /a ‘我是数据’</td><td align="center">创建默认永久节点(注意父节点必须要存在)</td></tr><tr><td align="center">2</td><td align="center">create -e /b ‘我是数据’</td><td align="center">创建临时节点(注意父节点必须要存在)</td></tr><tr><td align="center">3</td><td align="center">create -s /a/c ‘我是数据’</td><td align="center">创建带顺序编号的永久节点(注意父节点必须要存在)</td></tr><tr><td align="center">4</td><td align="center">create -e -s /a/d ‘我是数据’</td><td align="center">创建临时节点带顺序编号(注意父节点必须要存在)</td></tr><tr><td align="center">5</td><td align="center">get /a</td><td align="center">获取znode的数据</td></tr><tr><td align="center">6</td><td align="center">set /a ‘我是数据’</td><td align="center">设置znode的数据</td></tr><tr><td align="center">7</td><td align="center">ls /a</td><td align="center">查看znode的树下的节点</td></tr><tr><td align="center">8</td><td align="center">delete /a</td><td align="center">只能删除没有子节点的znode</td></tr><tr><td align="center">9</td><td align="center">rmr /a</td><td align="center">不管里面有多少子节点znode，统统删除</td></tr><tr><td align="center">10</td><td align="center">stat /a</td><td align="center">查看节点信息</td></tr><tr><td align="center">11</td><td align="center">quit</td><td align="center">退出zookeeper</td></tr><tr><td align="center">12</td><td align="center">connect 192.168.6.105:2181</td><td align="center">连接集群中的别的节点</td></tr><tr><td align="center">13</td><td align="center">ls2 /a</td><td align="center">查看当前节点的子节点及当前节点的信息</td></tr><tr><td align="center">14</td><td align="center">get /a  watch</td><td align="center">a节点的数据变化事件注册了监听</td></tr><tr><td align="center">15</td><td align="center">ls /a watch</td><td align="center">对a节点的子节点变化事件注册了监听</td></tr></tbody></table><p>附：zk节点数据结构</p><table><thead><tr><th align="center">节点名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">czxid</td><td align="center">节点创建时的事务id</td></tr><tr><td align="center">mzxid</td><td align="center">节点修改时的事务id</td></tr><tr><td align="center">pzxid</td><td align="center">最近一次修改子节点的事务id</td></tr><tr><td align="center">ctime</td><td align="center">节点创建时间</td></tr><tr><td align="center">mtime</td><td align="center">节点修改时间</td></tr><tr><td align="center">dataversion</td><td align="center">数据版本，每修改一次加1</td></tr><tr><td align="center">cversion</td><td align="center">子节点版本号，每修改一次子节点，加1</td></tr><tr><td align="center">aversion</td><td align="center">ACL版本号</td></tr><tr><td align="center">ephemeralOwner</td><td align="center">是否是临时节点，0代表永久节点</td></tr><tr><td align="center">dataLength</td><td align="center">数据长度</td></tr><tr><td align="center">numChildren</td><td align="center">子节点个数</td></tr></tbody></table><h3 id="七、zk选举机制"><a href="#七、zk选举机制" class="headerlink" title="七、zk选举机制"></a>七、zk选举机制</h3><p>zk的选举机制蛮有意思的，先上一张网络配图（流程图）：<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191128/7.1.jpg" align="left/"></p><p><a href="https://blog.csdn.net/wyqwilliam/article/details/83537139" title="zookeeper的选举机制" target="_blank" rel="noopener"><strong>zookeeper的选举机制</strong></a>,这篇博文写的非常详细，值得一看。</p><p>选举出现的情况分为2种：</p><ol><li>服务器初始化启动。<br>无论是哪种情况，都将优先对比ZXID（事务ID），其次是SID（myid里面配置的serverId）<br>由于第一此启动的时候ZXID都是0 ，所以会对比myid，也就是说SID大的，被选举的几率就大，<br>例如：<br>在slave3、slave4、slave5上面部署zk集群，myid配置文件中分别是1,2,3，假设zk集群的启动顺序是slave4-slave3-slave5：<br>1). slave4启动后，把票投给自己，广播后发现集群中只有自己一个，集群中有三台zk（配置文件中配置了三台），票数没有过半，zk就会处于等待状态（LOOKING）；<br>2). slave3启动，投自己一票，广播后发现有个兄弟在线，接收到他的投票，首先会对比ZXID都是0，在对比myid，发现slave4的myid比自己大，slave3就会更新自己的投票，把票投给slave4；而对于slave4而言，无须更新自己的投票，只是再次向集群中所有机器广播上一次投票信息即可；<br>3). 投票统计slave4票数过半，slave4变成leader（LEADING），slave3变成小弟（FOLLOWING）；<br>4). slave5启动后发现集群中已经存到leader，自动变成小弟。</li></ol><ol start="2"><li>服务器运行期间无法和Leader保持连接。<br>1). 服务器运行期间，leader挂掉之后，集群中的FOLLOWING都会变成（LOOKING）状态，并进入选举过程；<br>2). 每个zk都会为自己投一票，运行期间每个zk上的ZXID是有可能不同的，选举线程会将收到的票数进行统计比较，还有优先比较ZXID，这时候ZXID大的zk成为leader的几率就大</li></ol><p>选举算法和选举具体细节上面那篇博文已经很清楚了，推荐阅读！</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用免费的CDN加速你的网站</title>
      <link href="/2019/11/25/%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84CDN%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2019/11/25/%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84CDN%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>拥有一个域名；</li><li>在cloudflare上注册账号，创建一个site；</li><li>在域名注册商那里修改cloudflare所提供的nds地址；</li><li>在cloudflare上添加一个要加速的网站地址，可以是ip或者域名网站（这个属于记录类型的不同，后面会讲到）；</li><li>测试配置成功与否；</li><li>个人理解的域名的记录类型；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>域名一个（二级域名也可以）；</li><li>cloudflare账号一个（直接注册）；</li></ol><h3 id="三、拥有一个域名"><a href="#三、拥有一个域名" class="headerlink" title="三、拥有一个域名"></a>三、拥有一个域名</h3><p>现在去阿里云、腾讯云买域名非常便宜，而且备案也方便了，不需要邮寄纸质备案申请表了，直接在网上审批即可，购买一个域名到成功备案半个月便能办好。<br>阿里云备案流程可以看这里：<a href="https://help.aliyun.com/knowledge_detail/36922.html" title="阿里云备案" target="_blank" rel="noopener">阿里云备案</a></p><h3 id="四、在cloudflare上注册账号，创建一个site"><a href="#四、在cloudflare上注册账号，创建一个site" class="headerlink" title="四、在cloudflare上注册账号，创建一个site"></a>四、在cloudflare上注册账号，创建一个site</h3><p>cloudflare官网：<a href="https://dash.cloudflare.com/login" title="cloudflare" target="_blank" rel="noopener">cloudflare</a></p><p>注册登陆之后在首页右上角有个‘add site’的按钮，添加你的顶级域名，<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/4.1.png" align="left/"></p><h3 id="五、域名的dns修改成cloudflare所提供的nds地址"><a href="#五、域名的dns修改成cloudflare所提供的nds地址" class="headerlink" title="五、域名的dns修改成cloudflare所提供的nds地址"></a>五、域名的dns修改成cloudflare所提供的nds地址</h3><p>进入域名页面后再进入DNS标签页中，找到cloudflare提供给你的两个DNS服务地址，并记录下来<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/5.1.png" align="left/"><br>去域名注册商那里修改顶级域名或二级域名的DNS地址为cloudflare提供DNS服务地址（如上图）<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/5.2.png" align="left/"><br><strong><font color="red">注意点</font></strong>：我的域名是阿里云域名（一般在域名注册商那里都能修改dns，好好找找就能找到），我配置的也是二级域名的dns解析，如果要是直接修改的顶级域名的dns，那么该顶级域名下的所有二级域名dns解析都会变成你修改的，因为我只加速了这一个二级域名下的网站，所以只改这个域名的dns。</p><p>检查域名的dns配置：<a href="https://zijian.aliyun.com" title="域名检查工具" target="_blank" rel="noopener">域名检查工具</a><br>附图：<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/5.3.png" align="left/"></p><h3 id="六、在cloudflare上添加一个要加速的网站地址"><a href="#六、在cloudflare上添加一个要加速的网站地址" class="headerlink" title="六、在cloudflare上添加一个要加速的网站地址"></a>六、在cloudflare上添加一个要加速的网站地址</h3><p>上述步骤配置完成后，再回到cloudflare的dns标签页下，添加一个你需要加速的网站<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/6.1.png" align="left/"></p><h3 id="七、测试配置"><a href="#七、测试配置" class="headerlink" title="七、测试配置"></a>七、测试配置</h3><p>配置完成后，一般需要等待几分钟到十几分钟后便可以测试有没有加速成功，<br>例如我上述配置中<code>lhy.erdongchen.top</code>此域名指向的是一台ip为：<code>93.179.112.20</code>的服务器，我在阿里云上修改这个域名的dns后，在cloudflare上配置好后，用自己笔记本打开cmd的ping命令得出的ip不是我服务器的IP地址（93.179.112.20），而是另一个ip，说明已经配置成功了！<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20191125/7.1.png" align="left/"><br><strong><font color="green">说明</font></strong>此种配置方式可以屏蔽掉真实的ip地址，可以提升服务器的安全等级；</p><h3 id="八、域名常用的记录类型说明"><a href="#八、域名常用的记录类型说明" class="headerlink" title="八、域名常用的记录类型说明"></a>八、域名常用的记录类型说明</h3><table><thead><tr><th align="center">记录类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">A记录</td><td align="center">A记录是用来指定域名或子域名对应的IP地址记录，保证域名指向对应的主机。将该域名下的网站服务器指向到自己的服务器上。该记录只能填写IP地址</td></tr><tr><td align="center">CNAME</td><td align="center">CNAME即我们常说的别名记录，该记录允许你为自己的主机设置别名。我们要多个域名指向同一个网站的时候，用CNAME就比较方便。</td></tr><tr><td align="center">NS记录</td><td align="center">NS即Name Server，该记录主要是用于指定域名是由那个DNS服务器来进行域名解析</td></tr><tr><td align="center">MX记录</td><td align="center">即邮件路由记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操控所有的邮箱设置</td></tr><tr><td align="center">TXT记录</td><td align="center">TXT记录是域名系统 (DNS) 中由域名托管服务商存储的一种资源记录。</td></tr><tr><td align="center">AAAA记录</td><td align="center">AAAA记录是用来指定网站域名对应的IPv6地址记录。</td></tr><tr><td align="center">TTL值</td><td align="center">TTL=time to live，表示解析记录在DNS服务器中的缓存时间。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据教程(二)-HDFS集群安装配置并附常用命令</title>
      <link href="/2019/11/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%BA%8C)-HDFS%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%99%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%BA%8C)-HDFS%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%99%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>hadoop集群部署服务器规划；</li><li>hadoop安装包的下载解压；</li><li>配置hadoop的系统环境变量；</li><li>修改配置文件（主要四个文件：core-site.xml,hdfs-site.xml,hadoop-env.sh,worker）；</li><li>初始化namenode节点；</li><li>启动hdfs；</li><li>HDFS的其他配置项；</li><li>HDFS常用命令总结；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>承上启下，沿用第一篇大数据教程中的环境及软件；</li><li>hadoop安装包版本为：hadoop-3.2.1</li></ol><h3 id="三、hadoop集群部署服务器规划"><a href="#三、hadoop集群部署服务器规划" class="headerlink" title="三、hadoop集群部署服务器规划"></a>三、hadoop集群部署服务器规划</h3><p>计划在master（192.168.1.100）、slave（192.168.1.101）、slave2（192.168.1.102）上安装部署hadoop；<br>master节点上部署namenode<br>slave1、slave2节点上部署datanode<br>slave1上部署SecondaryNameNode节点</p><h3 id="四、hadoop安装包的下载解压"><a href="#四、hadoop安装包的下载解压" class="headerlink" title="四、hadoop安装包的下载解压"></a>四、hadoop安装包的下载解压</h3><p>hadoop官方网站：<a href="https://hadoop.apache.org" title="hadoop" target="_blank" rel="noopener"><strong>访问hadoop</strong></a><br>命令下载：<code>wget http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz</code><br>解压命令：<code>tar -xzvf hadoop-3.2.1.tar.gz -C /usr/local/</code></p><h3 id="五、配置hadoop的系统环境变量"><a href="#五、配置hadoop的系统环境变量" class="headerlink" title="五、配置hadoop的系统环境变量"></a>五、配置hadoop的系统环境变量</h3><p>修改文件 /etc/profile （<font color="red">三台机器都要修改</font>）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.编辑文件</span>vim /etc/profile<span class="token comment" spellcheck="true"># 2.文件底部增加以下内容：</span><span class="token comment" spellcheck="true"># hadoop</span>HADOOP_HOME<span class="token operator">=</span>/usr/local/hadoop-3.2.1PATH<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$PATH</span><span class="token function">export</span> HADOOP_HOME PATH<span class="token comment" spellcheck="true"># 3.刷新</span><span class="token function">source</span> /etc/profile</code></pre><h3 id="六、修改配置文件"><a href="#六、修改配置文件" class="headerlink" title="六、修改配置文件"></a>六、修改配置文件</h3><ol><li>修改配置文件：/usr/local/hadoop-3.2.1/etc/hadoop/core-site.xml （<font color="red">三台机器都要修改</font>）<pre class=" language-xml"><code class="language-xml"> # 新增以下内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:10001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS的URI，文件系统://namenode标识:端口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/hadoop-3.2.1/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上传到hadoop的临时文件夹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.checkpoint.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>用来设置检查点备份日志的最长时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li>修改配置文件：/usr/local/hadoop-3.2.1/etc/hadoop/hdfs-site.xml （<font color="red">三台机器都要修改</font>）<pre class=" language-xml"><code class="language-xml"> # 新增以下内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>副本个数，默认配置是3，应小于datanode机器数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/hadoop-3.2.1/namenode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>namenode上存储hdfs名字空间元数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/local/hadoop-3.2.1/datanode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode上数据块的物理存储位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li>修改配置文件：/usr/local/hadoop-3.2.1/etc/hadoop/hadoop-env.sh （<font color="red">三台机器都要修改</font>）<pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 在文件末尾新增一行</span> <span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8.0_161</code></pre></li><li>在master机器上修改文件（namenode节点）：/usr/local/hadoop-3.2.1/etc/hadoop/worker<pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 新增以下内容</span> master slave1 slave2</code></pre></li></ol><h3 id="七、初始化namenode节点"><a href="#七、初始化namenode节点" class="headerlink" title="七、初始化namenode节点"></a>七、初始化namenode节点</h3><p> 初始化命令：<code>hadoop namenode -format</code></p><h3 id="八、启动hdfs"><a href="#八、启动hdfs" class="headerlink" title="八、启动hdfs"></a>八、启动hdfs</h3><p>启动HDFS集群命令<code>/usr/local/hadoop-3.2.1/sbin/start-dfs.sh</code><br><strong><font color="red">防坑</font></strong>：启动报错：</p><pre><code>    Starting namenodes on [master]    ERROR: Attempting to operate on hdfs namenode as root    ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.    Starting datanodes    ERROR: Attempting to operate on hdfs datanode as root    ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.    Starting secondary namenodes [master]    ERROR: Attempting to operate on hdfs secondarynamenode as root    ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.</code></pre><p><strong><font color="green">解决方案</font></strong>：</p><ol><li>修改配置文件：start-dfs.sh、stop-dfs.sh （<font color="red">三台机器都要修改</font>）<pre class=" language-bash"><code class="language-bash"> vim /usr/local/hadoop-3.2.1/sbin/start-dfs.sh vim /usr/local/hadoop-3.2.1/sbin/stop-dfs.sh <span class="token comment" spellcheck="true">#在两个文件的顶部位置添加如下内容</span> HDFS_DATANODE_USER<span class="token operator">=</span>root HADOOP_SECURE_DN_USER<span class="token operator">=</span>hdfs HDFS_NAMENODE_USER<span class="token operator">=</span>root HDFS_SECONDARYNAMENODE_USER<span class="token operator">=</span>root</code></pre></li><li>修改配置文件：start-yarn.sh、stop-yarn.sh （<font color="red">三台机器都要修改</font>）<pre class=" language-bash"><code class="language-bash"> vim /usr/local/hadoop-3.2.1/sbin/start-yarn.sh vim /usr/local/hadoop-3.2.1/sbin/stop-yarn.sh <span class="token comment" spellcheck="true">#在两个文件的顶部位置添加如下内容</span> YARN_RESOURCEMANAGER_USER<span class="token operator">=</span>root HADOOP_SECURE_DN_USER<span class="token operator">=</span>yarn YARN_NODEMANAGER_USER<span class="token operator">=</span>root</code></pre><font color="green">备注：如果用其他账号启动HDFS，则所有root字符串位置替换成你的登陆用户名</font><br>启动完成后，可以访问web页面：<a href="http://192.168.6.100:9870" target="_blank" rel="noopener">http://192.168.6.100:9870</a></li></ol><h3 id="九、HDFS的其他配置项"><a href="#九、HDFS的其他配置项" class="headerlink" title="九、HDFS的其他配置项"></a>九、HDFS的其他配置项</h3><ol><li>默认配置时，SecondaryNameNode节点是会在namenode节点上启动的，如需指定的别的节点上启动，可在hdfs-site.xml中增加以下配置<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置secondaryNameNode --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>slave1:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="十、HDFS常用命令总结"><a href="#十、HDFS常用命令总结" class="headerlink" title="十、HDFS常用命令总结"></a>十、HDFS常用命令总结</h3><table><thead><tr><th align="center">序号</th><th align="center">参数格式</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">hadoop fs -ls</td><td align="center">显示当前目录结构，-ls -R 递归显示目录结构</td></tr><tr><td align="center">2</td><td align="center">hadoop fs -mkdir</td><td align="center">创建目录</td></tr><tr><td align="center">3</td><td align="center">hadoop fs -rm</td><td align="center">删除文件，-rm -R 递归删除目录和文件</td></tr><tr><td align="center">4</td><td align="center">hadoop fs -put [localsrc] [dst]</td><td align="center">从本地加载文件到HDFS</td></tr><tr><td align="center">5</td><td align="center">hadoop fs -get [dst] [localsrc]</td><td align="center">从HDFS导出文件到本地</td></tr><tr><td align="center">6</td><td align="center">hadoop fs - copyFromLocal [localsrc] [dst]</td><td align="center">从本地加载文件到HDFS，与put一致</td></tr><tr><td align="center">7</td><td align="center">hadoop fs -copyToLocal [dst] [localsrc]</td><td align="center">从HDFS导出文件到本地，与get一致</td></tr><tr><td align="center">8</td><td align="center">hadoop fs -test -e</td><td align="center">检测目录和文件是否存在，存在返回值$?为0，不存在返回1</td></tr><tr><td align="center">9</td><td align="center">hadoop fs -text</td><td align="center">查看文件内容</td></tr><tr><td align="center">10</td><td align="center">hadoop fs -du</td><td align="center">统计目录下各文件大小，单位字节。-du -s 汇总目录下文件大小，-du -h 显示单位</td></tr><tr><td align="center">11</td><td align="center">hadoop fs -tail</td><td align="center">显示文件末尾</td></tr><tr><td align="center">12</td><td align="center">hadoop fs -cp [src] [dst]</td><td align="center">从源目录复制文件到目标目录</td></tr><tr><td align="center">13</td><td align="center">hadoop fs -mv [src] [dst]</td><td align="center">从源目录移动文件到目标目录</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探-搭建 ELK+Filebeat 分布式日志采集分析平台</title>
      <link href="/2019/10/25/%E5%88%9D%E6%8E%A2-%E6%90%AD%E5%BB%BA-ELK-Filebeat-%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/10/25/%E5%88%9D%E6%8E%A2-%E6%90%AD%E5%BB%BA-ELK-Filebeat-%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="本篇教程侧重点导读"><a href="#本篇教程侧重点导读" class="headerlink" title="* 本篇教程侧重点导读"></a>* 本篇教程侧重点导读</h3><ol><li>教程涉及到的软件，技术，</li><li>ELK日志采集分析平台的技术框架介绍；</li><li>elasticsearch的安装部署单机、集群环境；</li><li>kibana的安装部署；</li><li>logtash的安装部署；</li><li>Filebeat日志采集的安装部署；</li><li>打通链路，日志采集-&gt;日志过滤分析-&gt;日志存储搜索-&gt;日志分析展示；</li><li>数据库数据的采集；</li><li>elasticsearch-head插件安装；</li></ol><h3 id="一、教程涉及到的软件，技术"><a href="#一、教程涉及到的软件，技术" class="headerlink" title="一、教程涉及到的软件，技术"></a>一、教程涉及到的软件，技术</h3><ol><li>使用到linux系统：CentOS 7；</li><li>安装ELK的前提是服务器需要java环境，我用的是：1.8.0_112;</li><li>elasticsearch、kibana、logtash和Filebeat都要使用同一版本（我使用的是7.4.0）；</li><li>ELK官方地址；<a href="https://www.elastic.co" title="go" target="_blank" rel="noopener">www.elastic.co</a></li><li>本篇使用了三台服务器，IP地址分别为192.168.1.220、192.168.1.221、192.168.1.222，并且在每台服务器上创建了一个账号和组（elk）；</li><li>此篇教程是分享个人理解的ELK技术框架，以及搭建过程，如有错误，敬请指出！</li></ol><h3 id="二、ELK日志采集分析平台的技术框架介绍"><a href="#二、ELK日志采集分析平台的技术框架介绍" class="headerlink" title="二、ELK日志采集分析平台的技术框架介绍"></a>二、ELK日志采集分析平台的技术框架介绍</h3><p>话不多说，先上一张网络图！<br><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/elk架构图.png" align="left/"></p><h3 id="三、elasticsearch的安装部署集群环境"><a href="#三、elasticsearch的安装部署集群环境" class="headerlink" title="三、elasticsearch的安装部署集群环境"></a>三、elasticsearch的安装部署集群环境</h3><ol><li><p>在三台服务器上都丢一个es(elasticsearch)安装包，并解压；</p><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/3.1.png" align="left/"></li><li><p>在三台服务器上都创建一个账号并把elasticsearch-7.4.0文件夹的所属用户所属组改一下（elk官方不建议使用root运行ELK）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建组</span><span class="token function">groupadd</span> elk<span class="token comment" spellcheck="true"># 创建用户</span><span class="token function">useradd</span> elk -g elk -p 123456<span class="token comment" spellcheck="true"># 修改文件夹权限</span>chonw -R elk:elk elasticsearch-7.4.0</code></pre></li><li><p>我把192.168.1.220作为es主节点，221和222作为数据节点，集群环境配置如下：<br>在服务器220上的es解压目录进入config目录，编辑elasticsearch.yml文件，新增如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 集群中的名称</span>cluster.name: es-master-node<span class="token comment" spellcheck="true"># 该节点名称</span>node.name: master<span class="token comment" spellcheck="true"># 该节点设置为主节点</span>node.master: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 该节点不是数据节点</span>node.data: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># 监听全部ip，在实际环境中应设置为一个安全的ip</span>network.host: 0.0.0.0<span class="token comment" spellcheck="true"># es服务端口号</span>http.port: 9200<span class="token comment" spellcheck="true"># 配置自动发现</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.220"</span>,<span class="token string">"192.168.1.221"</span>, <span class="token string">"192.168.1.222"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 跨域配置</span>http.cors.enabled: <span class="token boolean">true</span>http.cors.allow-origin: <span class="token string">"*"</span><span class="token comment" spellcheck="true"># 初始化主节点</span>cluster.initial_master_nodes: 192.168.1.220</code></pre></li><li><p>服务器221和222上的elasticsearch.yml文件配置为：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 集群中的名称</span>cluster.name: es-master-node<span class="token comment" spellcheck="true"># 该节点名称(node.name 可以自己起名字  只要三台服务器的节点明恒不一样就行)</span>node.name: <span class="token comment" spellcheck="true"># 该节点从节点</span>node.master: <span class="token boolean">false</span><span class="token comment" spellcheck="true"># 该节点是数据节点</span>node.data: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 监听全部ip，在实际环境中应设置为一个安全的ip</span>network.host: 0.0.0.0<span class="token comment" spellcheck="true"># es服务端口号</span>http.port: 9200<span class="token comment" spellcheck="true"># 配置自动发现</span>discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">"192.168.1.220"</span>,<span class="token string">"192.168.1.221"</span>, <span class="token string">"192.168.1.222"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 跨域配置</span>http.cors.enabled: <span class="token boolean">true</span>http.cors.allow-origin: <span class="token string">"*"</span></code></pre></li><li><p>在es主节点服务器上启动es：</p><pre class=" language-bash"><code class="language-bash">./bin/elasticsearch <span class="token operator">&amp;</span></code></pre><p><strong><font color="red">启动报错</font></strong>：<br><font color="red">ERROR: [1] bootstrap checks failed<br>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</font><br><strong><font color="green">解决方案</font></strong>：<br><font color="green">切换都root用户下执行</font></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看硬限制</span><span class="token function">ulimit</span> -Hn<span class="token comment" spellcheck="true"># 编辑文件</span>vim /etc/security/limits.conf<span class="token comment" spellcheck="true"># 添加如下配置(elk为启动es的用户名)</span>elk soft nofile 65536elk hard nofile 65536</code></pre><p><font color="green">需退出用户后重新登录，再次查看elk用户的硬限制，如果变为65536，说明设置成功！</font></p></li><li><p>主节点启动成功后，在启动两个从节点，其中9200是数据传输时端口，9300是集群通信端口</p></li><li><p>验证：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># es集群健康检查</span>curl <span class="token string">'192.168.1.220:9200/_cluster/health?pretty'</span><span class="token comment" spellcheck="true"># 返回的内容</span><span class="token punctuation">{</span><span class="token string">"cluster_name"</span> <span class="token keyword">:</span> <span class="token string">"es-master-node"</span>,<span class="token string">"status"</span> <span class="token keyword">:</span> <span class="token string">"green"</span>, <span class="token comment" spellcheck="true"># 为green则代表健康没问题，如果是yellow或者red则是集群有问题</span><span class="token string">"timed_out"</span> <span class="token keyword">:</span> false, <span class="token comment" spellcheck="true"># 是否有超时</span><span class="token string">"number_of_nodes"</span> <span class="token keyword">:</span> 3, <span class="token comment" spellcheck="true"># 集群中的节点数量</span><span class="token string">"number_of_data_nodes"</span> <span class="token keyword">:</span> 2, <span class="token comment" spellcheck="true"># 集群中data节点的数量</span><span class="token string">"active_primary_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"active_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"relocating_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"initializing_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"unassigned_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"delayed_unassigned_shards"</span> <span class="token keyword">:</span> 0,<span class="token string">"number_of_pending_tasks"</span> <span class="token keyword">:</span> 0,<span class="token string">"number_of_in_flight_fetch"</span> <span class="token keyword">:</span> 0,<span class="token string">"task_max_waiting_in_queue_millis"</span> <span class="token keyword">:</span> 0,<span class="token string">"active_shards_percent_as_number"</span> <span class="token keyword">:</span> 100.0<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 查看集群详细信息</span>curl <span class="token string">'192.168.1.220:9200/_cluster/state?pretty'</span></code></pre></li></ol><h3 id="四、kibana的安装部署（我是部署在220上-部署服务器随意选择，只要配置对就好）"><a href="#四、kibana的安装部署（我是部署在220上-部署服务器随意选择，只要配置对就好）" class="headerlink" title="四、kibana的安装部署（我是部署在220上,部署服务器随意选择，只要配置对就好）"></a>四、kibana的安装部署（我是部署在220上,部署服务器随意选择，只要配置对就好）</h3><ol><li>将安装包解压至/usr/local/elk目录下，并修改权限到elk用户上</li><li>修改kibana解压目录下config里面的配置文件：kibana.yml，新增如下内容：<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置kibana的端口</span>server.port: 5601<span class="token comment" spellcheck="true"># 配置监听ip</span>server.host: 192.168.1.220<span class="token comment" spellcheck="true"># 配置es服务器的ip，如果是集群则配置该集群中主节点的ip</span>elasticsearch.hosts: <span class="token punctuation">[</span><span class="token string">"http://192.168.1.220:9200"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置kibana的日志文件路径，不然默认是messages里记录日志</span>logging.dest: /usr/local/elk/kibana-7.4.0-linux-x86_64/logs/kibana.logi18n.locale: <span class="token string">"zh-CN"</span></code></pre></li><li>浏览器访问；192.168.1.220:5601</li></ol><h3 id="五、logtash的安装部署（我是部署在221上，任意服务器上都可部署）"><a href="#五、logtash的安装部署（我是部署在221上，任意服务器上都可部署）" class="headerlink" title="五、logtash的安装部署（我是部署在221上，任意服务器上都可部署）"></a>五、logtash的安装部署（我是部署在221上，任意服务器上都可部署）</h3><ol><li><p>将安装包解压至/usr/local/elk目录下，并修改权限到elk用户上</p></li><li><p>在config目录下新建一个文件myLogstash.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建文件myLogstash.conf</span><span class="token function">touch</span> myLogstash.conf<span class="token comment" spellcheck="true"># 增加如下内容</span>input <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#定义日志源</span>beats <span class="token punctuation">{</span> port <span class="token operator">=</span><span class="token operator">></span> 9900 <span class="token comment" spellcheck="true">#监听端口</span><span class="token punctuation">}</span><span class="token punctuation">}</span>output <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#日志输出源</span><span class="token keyword">if</span> <span class="token string">"nginxlog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#这里的配置是接收Filebeat传过来的日志做分类处理，存到不同的es表里</span>elasticsearch <span class="token punctuation">{</span> <span class="token comment" spellcheck="true"># 输出到es</span> hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"http://192.168.1.220:9200"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># es主节点所在IP</span> index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"nginx-%{+YYYY.MM.dd}"</span> <span class="token comment" spellcheck="true"># 定义索引</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">"tomcatlog"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>tags<span class="token punctuation">]</span><span class="token punctuation">{</span>elasticsearch <span class="token punctuation">{</span> hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"http://192.168.1.220:9200"</span><span class="token punctuation">]</span> index <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"tomcat-%{+YYYY.MM.dd}"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>检测配置文件是否正确</p><pre class=" language-bash"><code class="language-bash">./bin/logstash --path.settings /config -f config/myLogstash.conf --config.test_and_exit<span class="token comment" spellcheck="true">#参数说明</span>--path.settings <span class="token comment" spellcheck="true"># 指定logstash的配置文件所在目录</span>-f <span class="token comment" spellcheck="true"># 指定需要被检测的配置文件</span>--config.test_and_exit <span class="token comment" spellcheck="true"># 检测完之后就退出，不启动logstash</span></code></pre></li><li><p>启动logstash</p><pre class=" language-bash"><code class="language-bash">./bin/logstash -f config/myLogstash.conf <span class="token operator">&amp;</span></code></pre></li></ol><h3 id="六、将Filebeat日志采集部署至待采集的机器上"><a href="#六、将Filebeat日志采集部署至待采集的机器上" class="headerlink" title="六、将Filebeat日志采集部署至待采集的机器上"></a>六、将Filebeat日志采集部署至待采集的机器上</h3><p>需求：需采集192.168.1.182上的nginx和tomcat日志,182服务器是windows server服务器，所以我下载的Filebeat是zip格式包</p><ol><li>将Filebeat程序放到182上，并解压</li><li>修改配置文件filebet.yml:<img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/6.2.png" align="left/"></li><li>启动Filebeat<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Filebeat目录执行</span>filebet.exe -c filebeat.yml</code></pre></li></ol><h3 id="七、链路打通"><a href="#七、链路打通" class="headerlink" title="七、链路打通"></a>七、链路打通</h3><ol><li>随便访问一下nginx和tomcat，使其产生日志</li><li>浏览器访问kibana服务查看es中的索引：<img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/7.2.png" align="left/"></li><li>或者访问 curl 192.168.1.220:9200/_cat/indices?v 同样可以查看到有索引建立</li><li>如上第二步或者第三步，可以看到，在logstash配置文件中定义的两个索引成功获取到了，证明配置没问题，logstash与es通信正常</li><li>在浏览器界面打开kibana服务，配置es中的两个索引：<img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/7.5.png" align="left/"></li><li>在Discover界面查看采集的日志数据：<img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20191025/7.6.png" align="left/"></li></ol><h3 id="八、数据库数据的采集"><a href="#八、数据库数据的采集" class="headerlink" title="八、数据库数据的采集"></a>八、数据库数据的采集</h3><p>logstash同样也可以采集数据库中的数据到es，只需要改input数据源中的相关配置就ok了，这里不再叙述详细步骤</p><h3 id="九、elasticsearch-head插件安装"><a href="#九、elasticsearch-head插件安装" class="headerlink" title="九、elasticsearch-head插件安装"></a>九、elasticsearch-head插件安装</h3><p>参考链接：<a href="https://blog.csdn.net/qq924862077/article/details/79994565" title="go" target="_blank" rel="noopener">elasticsearch-head插件安装</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 日志分析平台 </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令解析(持续更新)</title>
      <link href="/2019/09/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>/2019/09/30/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章是基于博主学习过程中积累的命令整理，会在职业生涯中持续更新，差不多都是常用命令，方便查阅备忘之用。</p><h3 id="本篇教程常用命令分类如下"><a href="#本篇教程常用命令分类如下" class="headerlink" title="本篇教程常用命令分类如下"></a>本篇教程常用命令分类如下</h3><ol><li>系统信息；</li><li>系统性能；</li><li>文件和目录；</li><li>文件权限；</li><li>文件查找；</li><li>查看文件内容；</li><li>文件处理；</li><li>用户与权限；</li><li>磁盘管理；</li><li>压缩与解压；</li><li>其他常用命令。</li></ol><h3 id="一、系统信息"><a href="#一、系统信息" class="headerlink" title="一、系统信息"></a>一、系统信息</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">uname</td><td align="center">显示系统信息</td></tr><tr><td align="center">cat /proc/version</td><td align="center">查看linux版本信息</td></tr><tr><td align="center">hostnamectl</td><td align="center">查看系统内核、系统版本信息</td></tr><tr><td align="center">cal 2019</td><td align="center">显示2019年日历</td></tr><tr><td align="center">ifconfig</td><td align="center">查看网卡信息</td></tr><tr><td align="center">cat /proc/cpuinfo</td><td align="center">显示CPU的信息</td></tr><tr><td align="center">cat /proc/cpuinfo | grep &#39;physical id&#39;| sort | uniq | wc -l</td><td align="center">查看物理CPU个数</td></tr><tr><td align="center">cat /proc/cpuinfo|grep &#39;cpu cores&#39;|uniq</td><td align="center">查看每个物理CPU的核心数</td></tr><tr><td align="center">cat /proc/cpuinfo|grep &#39;processor&#39;|wc -l</td><td align="center">查看逻辑CPU个数（CPU线程数）</td></tr><tr><td align="center">ping</td><td align="center">测试连接情况</td></tr></tbody></table><h3 id="二、系统性能"><a href="#二、系统性能" class="headerlink" title="二、系统性能"></a>二、系统性能</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th><th align="center">示例</th><th align="center">示例说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">top</td><td align="center">实时的显示cpu、内存、进程等使用情况（类似于windows下的任务管理器）</td><td align="center">top -d 3 -p 8243 -u mysql</td><td align="center">-d为界面刷新间隔时间，默认为5秒，-p指定进程id，-u指定用户名</td><td align="center"><a href="http://nginx.org/en/download.html" title="点击查看" target="_blank" rel="noopener">top命令的交互以及top各输出参数含义</a></td></tr><tr><td align="center">free</td><td align="center">查看系统内存及虚拟内存使用情况</td><td align="center">free -h</td><td align="center">以人类可读的方式显示内存信息</td><td align="center"></td></tr><tr><td align="center">iostat</td><td align="center">查看系统磁盘io负载分析、cpu使用情况</td><td align="center">iostat 2 5</td><td align="center">每2秒显示一次统计情况，一共显示5次</td><td align="center"></td></tr><tr><td align="center">du</td><td align="center">计算文件大小</td><td align="center">du -h /usr/local/nginx/</td><td align="center">显示指定路径下的各个文件的大小并汇总</td><td align="center"></td></tr><tr><td align="center">df</td><td align="center">显示磁盘的空间使用情况</td><td align="center">df -h</td><td align="center">人类可读的方式显示磁盘空间信息</td><td align="center"></td></tr><tr><td align="center">systemctl</td><td align="center">查看正在运行的服务</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="三、文件和目录"><a href="#三、文件和目录" class="headerlink" title="三、文件和目录"></a>三、文件和目录</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">cd</td><td align="center">进入当前登录用的的家目录（Change Directory的缩写）</td></tr><tr><td align="center">cd ..</td><td align="center">返回上一级目录</td></tr><tr><td align="center">cd -</td><td align="center">返回上次所在的目录</td></tr><tr><td align="center">cd /</td><td align="center">返回到根目录</td></tr><tr><td align="center">cd ./a/b</td><td align="center">进入当前a目录下的b目录（相对路径）</td></tr><tr><td align="center">cd /usr/local</td><td align="center">进入指定目录（绝对路径）</td></tr><tr><td align="center">pwd</td><td align="center">显示工作路径（Print Working Directory的缩写）</td></tr><tr><td align="center">ls -a</td><td align="center">列出目录下所有的文件（包括隐藏文件、文件夹）</td></tr><tr><td align="center">file 文件或目录</td><td align="center">显示文件类型</td></tr><tr><td align="center">mkdir abc</td><td align="center">在当前目录下创建目录abc，mkdir是make directory的缩写</td></tr><tr><td align="center">mkdir -p /a/b/c</td><td align="center">递归创建目录，-p表示父目录不存在时，先创建父目录</td></tr><tr><td align="center">touch abc.txt</td><td align="center">创建文件abc.txt</td></tr><tr><td align="center">rm 文件</td><td align="center">删除文件</td></tr><tr><td align="center">rm -r 文件或目录</td><td align="center">删除目录及目录下所有的文件</td></tr><tr><td align="center">rm -rf 文件或目录</td><td align="center">强制删除！不询问</td></tr><tr><td align="center">mv /usr/local/a /var/b</td><td align="center">移动a到var目录下并且改名为b</td></tr><tr><td align="center">cp -ai /usr/local/abc /var/</td><td align="center">复制abc目录或者文件到var目录下（-a表示文件的属性也复制，目录下所有文件都复制，-i表示覆盖前询问）</td></tr><tr><td align="center">scp -r /usr/local/abc.txt root@192.168.0.121:/root/</td><td align="center">远程传输文件：将本机的abc.txt传输到121服务器下的root目录下</td></tr><tr><td align="center">ln -s /usr/local/abc.txt /usr/local/</td><td align="center">创建文件的软连接，快捷方式名字不变</td></tr><tr><td align="center">ln -s /usr/local/abc.txt /usr/local/def.txt</td><td align="center">创建文件的软连接，快捷方式名字变为def.txt</td></tr><tr><td align="center">ln -s /usr/local /var/</td><td align="center">对目录创建软连接</td></tr><tr><td align="center">ln /usr/local/abc.txt /usr/local/</td><td align="center">创建文件的硬连接</td></tr></tbody></table><h3 id="四、文件权限"><a href="#四、文件权限" class="headerlink" title="四、文件权限"></a>四、文件权限</h3><ol><li><p><strong>命令</strong>：chmod<br><strong>命令含义</strong>：change mode的缩写，变更文件或目录的权限。<br><strong>语法1</strong>：<strong><font color="green">chmod [-cfvR] [{ugoa}{+-=}{rwx}] 文件或目录</font></strong><br><strong>语法2</strong>：<strong><font color="green">chmod [-cfvR] [421] 文件或目录</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">若该文件权限确实已经更改，才显示其更改动作</td></tr><tr><td align="center">-f</td><td align="center">若该文件权限法务被更改也不要显示错误讯息</td></tr><tr><td align="center">-v</td><td align="center">显示权限变更的详细信息</td></tr><tr><td align="center">-R</td><td align="center">对当前目录下的所有文件和子目录进行相同权限的变更</td></tr></tbody></table><p><strong>mode参数格式</strong>：[ugoa][+-=][rwxX][数字]</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">u</td><td align="center">表示该文件的拥有者</td></tr><tr><td align="center">g</td><td align="center">表示与该文件的拥有者属于同一个group中</td></tr><tr><td align="center">o</td><td align="center">表示其他以外的人</td></tr><tr><td align="center">a</td><td align="center">所有</td></tr><tr><td align="center">+</td><td align="center">增加权限</td></tr><tr><td align="center">-</td><td align="center">取消全校</td></tr><tr><td align="center">=</td><td align="center">唯一设定权限</td></tr><tr><td align="center">r</td><td align="center">可读取</td></tr><tr><td align="center">w</td><td align="center">可写入</td></tr><tr><td align="center">x</td><td align="center">可执行</td></tr><tr><td align="center">X</td><td align="center">只有当该文件是个子目录或者该文件以及被设定过为可执行</td></tr></tbody></table><p><strong>数字参数时权限含义</strong>：</p><table><thead><tr><th align="center">权限数值</th><th align="center">权限</th><th align="center">二进制</th><th align="center">具体作用</th></tr></thead><tbody><tr><td align="center">4</td><td align="center">r</td><td align="center">00000100</td><td align="center">read，读取。当前用户可以读取文件内容，当前用户可以浏览目录。</td></tr><tr><td align="center">2</td><td align="center">w</td><td align="center">00000010</td><td align="center">write，写入。当前用户可以新增或修改文件内容，当前用户可以删除、移动目录或目录内文件。</td></tr><tr><td align="center">1</td><td align="center">x</td><td align="center">00000001</td><td align="center">execute，执行。当前用户可以执行文件，当前用户可以进入目录。</td></tr></tbody></table><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">chmod u=rwx,g=rw,o=r test.txt</td><td align="center">给test.txt文件所有者设置<font color="red">读写执行</font>的权限，给所在组设置<font color="red">读写</font>权限，给其它组设置<font color="red">只读</font>权限</td></tr><tr><td align="center">chmod -v u-x,g+x test.txt</td><td align="center">为test.txt文件所有者去除<font color="red">执行</font>权限，为所在组增加<font color="red">执行</font>权限，并打印变更权限详细信息</td></tr><tr><td align="center">chmod +x test.txt</td><td align="center">为test.txt文件的所有者、所在组、其他组都增加<font color="red">执行</font>权限</td></tr><tr><td align="center">chmod 764 test.txt</td><td align="center">第一个数字7表示变更文件所有者权限为<font color="red">读写执行</font>，第二个数字6表示变更文件所在组权限为<font color="red">读写</font>，第三个数字4表示变更其他组权限为<font color="red">只读</font></td></tr><tr><td align="center">chmod 600 test.txt</td><td align="center">给test.txt文件所有者设置<font color="red">读写</font>的权限，其他所有人和组都无任何权限</td></tr></tbody></table></li><li><p><strong>命令</strong>：chown<br><strong>命令含义</strong>：change owner的缩写，更改所有者和所属组。<br><strong>语法</strong>：<strong><font color="green">chown [-cfvR] user[:group] 文件或目录</font></strong><br><strong>user</strong> : 表示新的文件拥有者的使用者 ID<br><strong>group</strong> : 表示新的文件拥有者的使用者组(group)</p><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">chown tom test.txt</td><td align="center">更改所属用户为tom</td></tr><tr><td align="center">chown :people test.txt</td><td align="center">更改所属组为people</td></tr><tr><td align="center">chown -R tom:people /usr/a目录</td><td align="center">更改a目录及子目录的所有者为tom、所属组为people</td></tr></tbody></table></li></ol><h3 id="五、文件查找"><a href="#五、文件查找" class="headerlink" title="五、文件查找"></a>五、文件查找</h3><ol><li><p><strong>命令</strong>：locate<br><strong>命令含义</strong>：在mlocate数据库中搜索条目.<br><strong>语法</strong>：<strong><font color="green">locate [OPTION]… [PATTERN]…</font></strong><br><strong>特点</strong>：<br>①.非实时，模糊匹配，查找是根据全系统文件数据库进行的；<br>②.如果文件数据库不存在，则不能查找；<br>③.updatedb，手动生成文件数据库；<br>④.基于索引查找，查找速度快；<br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-A, –all</td><td align="center">只显示匹配所有模式的条目</td></tr><tr><td align="center">-b, –basename</td><td align="center">只匹配路径名的基本名称</td></tr><tr><td align="center">-c, –count</td><td align="center">只显示找到的条目的数目</td></tr><tr><td align="center">-d, –database DBPATH</td><td align="center">使用 DBPATH，而非默认数据（即：/var/lib/mlocate/mlocate.db）</td></tr><tr><td align="center">-e, –existing</td><td align="center">只显示当前存在的文件条目</td></tr><tr><td align="center">-L, –follow</td><td align="center">当文件存在时跟随蔓延的符号链接（默认）</td></tr><tr><td align="center">-h, –help</td><td align="center">显示帮助信息</td></tr><tr><td align="center">-i, –ignore-case</td><td align="center">匹配模式时忽略大小写区别</td></tr><tr><td align="center">-l, –limit, -n LIMIT</td><td align="center">限制为 LIMIT项目的输出（或 计数）</td></tr><tr><td align="center">-m, –mmap</td><td align="center">被忽略，用于向后兼容</td></tr><tr><td align="center">-P, –nofollow, -H</td><td align="center">当检查文件时不跟随蔓延的符号链接</td></tr><tr><td align="center">-0, –null</td><td align="center">输出时以 NUL 分隔项目</td></tr><tr><td align="center">-S, –statistics</td><td align="center">不搜索项目,显示有关每个已用数据库的统计信息</td></tr><tr><td align="center">-q, –quiet</td><td align="center">不报告关于读取数据库的错误消息</td></tr><tr><td align="center">-r, –regexp REGEXP</td><td align="center">搜索基本正则表达式 REGEXP 而不是模式</td></tr><tr><td align="center">–regex</td><td align="center">模式是扩展正则表达式</td></tr><tr><td align="center">-s, –stdio</td><td align="center">被忽略，用于向后兼容</td></tr><tr><td align="center">-V, –version</td><td align="center">显示版本信息</td></tr><tr><td align="center">-w, –wholename</td><td align="center">匹配完整路径名（默认）</td></tr></tbody></table><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">locate /etc/sh</td><td align="center">搜索目录下所有以 sh 开头的文件</td></tr><tr><td align="center">locate passwd</td><td align="center">查找包含某个字符串的相关文件</td></tr><tr><td align="center">locate -n 5 passwd</td><td align="center">限定显示数量</td></tr><tr><td align="center">locate -i -n 5 passwd</td><td align="center">查找时不区分大小写</td></tr></tbody></table></li><li><p><strong>命令</strong>：find<br><strong>命令含义</strong>：功能强大的系统查找命令.<br><strong>语法</strong>：<strong><font color="green">find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path…] [expression]</font></strong><br><strong>常用参数说明</strong>：</p><table><thead><tr><th align="center">常用参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-name</td><td align="center">按名称查找</td></tr><tr><td align="center">-size</td><td align="center">按大小查找</td></tr><tr><td align="center">-user</td><td align="center">按属性查找</td></tr><tr><td align="center">-type</td><td align="center">按类型查找</td></tr><tr><td align="center">-iname</td><td align="center">忽略大小写</td></tr></tbody></table><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">find /home -name &quot;*.txt&quot;</td><td align="center">在/home目录下查找以.txt结尾的文件名</td></tr><tr><td align="center">find /home -iname &quot;*.txt&quot;</td><td align="center">在/home目录下查找以.txt结尾的文件名并忽略大小写</td></tr><tr><td align="center">find . -name &quot;<em>.txt&quot; -o -name &quot;</em>.pdf&quot;</td><td align="center">当前目录及子目录下查找所有以.txt或者以.pdf结尾的文件</td></tr><tr><td align="center">find . -type f -atime -7</td><td align="center">当前目录下搜索最近七天内被访问过的所有文件</td></tr><tr><td align="center">find . -type f -atime +7</td><td align="center">当前目录下搜索超过七天内被访问过的所有文件</td></tr><tr><td align="center">find . -type f -amin +10</td><td align="center">当前目录下搜索访问时间超过10分钟的所有文件</td></tr><tr><td align="center">find . -type f -size +10k</td><td align="center">当前目录下搜索大于10KB的文件</td></tr><tr><td align="center">find . -type f -size 10M</td><td align="center">当前目录下搜索等于10MB的文件</td></tr><tr><td align="center">find . -type f -name &quot;*.txt&quot; -delete</td><td align="center">删除当前目录下所有.txt文件</td></tr><tr><td align="center">find . -name &quot;*.java&quot; ! -perm 644</td><td align="center">找出当前目录下权限不是644的java文件</td></tr><tr><td align="center">find . -perm 777</td><td align="center">当前目录下搜索出权限为777的文件和目录</td></tr><tr><td align="center">find . -user tom</td><td align="center">找出当前目录用户tom拥有的所有文件和目录</td></tr><tr><td align="center">find . -empty</td><td align="center">要列出所有长度为零的文件</td></tr><tr><td align="center">find /etc -maxdepth 4 -mindepth 2 -name passwd</td><td align="center">查找etc目录下，查找子目录最大深度为4层、最小深度为2层，并且文件名为passwd的文件或目录</td></tr><tr><td align="center">find . -type f -name ‘*.mp3’ -exec cp {} /tmp ‘;’</td><td align="center">查找当前目录下所有的MP3文件，并且复制到tmp目录</td></tr></tbody></table><p><font color="red">说明：find命令的功能和参数及其强大和复杂，这里只列出了比较常用的参数、语法和示例。详情可查阅：<a href="https://man.linuxde.net/find" title="find" target="_blank" rel="noopener">find</a></font></p></li></ol><h3 id="六、查看文件内容"><a href="#六、查看文件内容" class="headerlink" title="六、查看文件内容"></a>六、查看文件内容</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">cat [-n] 文件名</td><td align="center">显示文件内容，-n表示连行号一起显示</td></tr><tr><td align="center">less 文件名</td><td align="center">一页一页的显示文件内容（按q退出浏览）</td></tr><tr><td align="center">head [-n] 文件名</td><td align="center">显示文件头n行内容，n指定显示多少行</td></tr><tr><td align="center">tail -n 3 -f 文件名</td><td align="center">显示文件尾3行内容，并在文件更新时实时追加显示，没有-n默认10行</td></tr><tr><td align="center">sed -n ‘/tomcat/p’ 文件名</td><td align="center">显示包括关键词所在行</td></tr><tr><td align="center">less 文件名</td><td align="center">grep tomcat</td></tr></tbody></table><h3 id="七、文件处理"><a href="#七、文件处理" class="headerlink" title="七、文件处理"></a>七、文件处理</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">echo &quot;test&quot; &gt; abc.txt</td><td align="center">将字符串”test”写入（覆盖）到abc.txt文件中，原有文本内容会被覆盖，没有abc.txt文件则会创建</td></tr><tr><td align="center">echo &quot;test&quot; &gt;&gt; abc.txt</td><td align="center">将字符串”test”追加到abc.txt文本中</td></tr><tr><td align="center">wc -lwcm abc.txt</td><td align="center">统计文本信息：-l表示统计行数，-w统计单词，-c统计字节数，-m统计字符数</td></tr><tr><td align="center">vim abc.txt</td><td align="center">查看编辑文件</td></tr></tbody></table><h3 id="八、用户与权限"><a href="#八、用户与权限" class="headerlink" title="八、用户与权限"></a>八、用户与权限</h3><ol><li><p><strong>命令</strong>：useradd<br><strong>命令含义</strong>：添加用户<br><strong>语法</strong>：<strong><font color="green">useradd [options] LOGIN</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-c&lt;备注&gt;</td><td align="center">加上备注文字。备注文字会保存在passwd的备注栏位中。</td></tr><tr><td align="center">-d&lt;登入目录&gt;</td><td align="center">指定用户登入时的启始目录。</td></tr><tr><td align="center">-D</td><td align="center">变更预设值．</td></tr><tr><td align="center">-e&lt;有效期限&gt;</td><td align="center">指定帐号的有效期限。</td></tr><tr><td align="center">-f&lt;缓冲天数&gt;</td><td align="center">指定在密码过期后多少天即关闭该帐号。</td></tr><tr><td align="center">-g&lt;群组&gt;</td><td align="center">指定用户所属的群组。</td></tr><tr><td align="center">-G&lt;群组&gt;</td><td align="center">指定用户所属的附加群组。</td></tr><tr><td align="center">-m</td><td align="center">自动建立用户的登入目录。</td></tr><tr><td align="center">-M</td><td align="center">不要自动建立用户的登入目录。</td></tr><tr><td align="center">-n</td><td align="center">取消建立以用户名称为名的群组．</td></tr><tr><td align="center">-r</td><td align="center">建立系统帐号。</td></tr><tr><td align="center">-s<shell></shell></td><td align="center">指定用户登入后所使用的shell。</td></tr><tr><td align="center">-u<uid></uid></td><td align="center">指定用户ID。</td></tr></tbody></table></li><li><p><strong>命令</strong>：userdel<br><strong>命令含义</strong>：删除用户<br><strong>语法</strong>：<strong><font color="green">userdel [options] LOGIN</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">强制删除用户，即使用户当前已登录；</td></tr><tr><td align="center">-r</td><td align="center">删除用户的同时，删除与用户相关的所有文件。</td></tr></tbody></table></li><li><p><strong>命令</strong>：usermod<br><strong>命令含义</strong>：用于修改用户账号<br><strong>语法</strong>：<strong><font color="green">usermod [options] LOGIN</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-a|–append</td><td align="center">把用户追加到某些组中，仅与-G选项一起使用</td></tr><tr><td align="center">-c|–comment</td><td align="center">修改/etc/passwd文件第五段comment</td></tr><tr><td align="center">-d|–home</td><td align="center">修改用户的家目录通常和-m选项一起使用</td></tr><tr><td align="center">-e|–expiredate</td><td align="center">指定用户帐号禁用的日期，格式YY-MM-DD</td></tr><tr><td align="center">-f|–inactive</td><td align="center">密码过期多少天后禁用该帐号，0:密码过期就禁用帐号，-1:禁用此功能，默认值是-1</td></tr><tr><td align="center">-g|–gid</td><td align="center">修改用户的gid，改组一定存在</td></tr><tr><td align="center">-G|–groups</td><td align="center">把用户追加到某些组中，仅与-a选项一起使用</td></tr><tr><td align="center">-l|–login</td><td align="center">修改用户的登录名称</td></tr><tr><td align="center">-L|–lock</td><td align="center">锁定用户的密码</td></tr><tr><td align="center">-m|–move-home</td><td align="center">修改用户的家目录通常和-d选项一起使用</td></tr><tr><td align="center">-s|–shell</td><td align="center">修改用户的shell</td></tr><tr><td align="center">-u|–uid</td><td align="center">修改用户的uid，该uid必须唯一</td></tr><tr><td align="center">-U|–unlock</td><td align="center">解锁用户的密码</td></tr></tbody></table></li><li><p><strong>命令</strong>：groupadd<br><strong>命令含义</strong>：添加组<br><strong>语法</strong>：<strong><font color="green">groupadd [options] GROUP</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-g gid</td><td align="center">指定组id</td></tr><tr><td align="center">-r</td><td align="center">创建系统组</td></tr><tr><td align="center">-f</td><td align="center">如果组已经存在，则成功退出；如果已经使用GID，则取消-g。</td></tr></tbody></table></li><li><p><strong>命令</strong>：groupdel<br><strong>命令含义</strong>：删除组<br><strong>语法</strong>：<strong><font color="green">groupdel [options] GROUP</font></strong></p></li><li><p><strong>命令</strong>：groupmod<br><strong>命令含义</strong>：用于修改组信息<br><strong>语法</strong>：<strong><font color="green">groupmod [options] GROUP</font></strong><br><strong>参数说明</strong>：</p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-g GID</td><td align="center">修改组 ID；</td></tr><tr><td align="center">-n</td><td align="center">新组名 修改组名</td></tr></tbody></table></li><li><p><strong>命令</strong>：passwd<br><strong>命令含义</strong>：用来更改用户的密码<br><strong>语法</strong>：<strong><font color="green">passwd [OPTION…] &lt;accountName&gt;</font></strong></p><table><thead><tr><th align="center">参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-k, –keep-tokens</td><td align="center">保留即将过期的用户在期满后能仍能使用；</td></tr><tr><td align="center">-d, –delete</td><td align="center">删除用户密码，仅能以root权限操作；</td></tr><tr><td align="center">-l, –lock</td><td align="center">锁住用户无权更改其密码，仅能通过root权限操作；</td></tr><tr><td align="center">-u, –unlock</td><td align="center">解除锁定；</td></tr><tr><td align="center">-f, –force</td><td align="center">强制操作；仅root权限才能操作；</td></tr><tr><td align="center">-x, –maximum=DAYS</td><td align="center">两次密码修正的最大天数，后面接数字；仅能root权限操作；</td></tr><tr><td align="center">-n, –minimum=DAYS</td><td align="center">两次密码修改的最小天数，后面接数字，仅能root权限操作；</td></tr><tr><td align="center">-w, –warning=DAYS</td><td align="center">在距多少天提醒用户修改密码；仅能root权限操作；</td></tr><tr><td align="center">-i, –inactive=DAYS</td><td align="center">在密码过期后多少天，用户被禁掉，仅能以root操作；</td></tr><tr><td align="center">-S, –status</td><td align="center">查询用户的密码状态，仅能root用户操作；</td></tr></tbody></table></li></ol><h3 id="九、磁盘管理"><a href="#九、磁盘管理" class="headerlink" title="九、磁盘管理"></a>九、磁盘管理</h3><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">df -h</td><td align="center">显示磁盘的空间使用情况 及挂载点</td></tr><tr><td align="center">df -h /var/log</td><td align="center">（显示log所在分区（挂载点）、目录所在磁盘及可用的磁盘容量）</td></tr><tr><td align="center">du -sm /var/log/* | sort -rn</td><td align="center">根据占用磁盘空间大小排序（MB）某目录下文件和目录大小</td></tr><tr><td align="center">fdisk -l</td><td align="center">查所有分区及总容量，加/dev/sda为查硬盘a的分区）</td></tr><tr><td align="center">fdisk /dev/sdb</td><td align="center">对硬盘sdb进行分区</td></tr><tr><td align="center">mount /dev/sda1 /mnt</td><td align="center">硬盘sda1挂载到/mnt目录（mount 装置文件名 挂载点）</td></tr><tr><td align="center">mount -o loop /opt/soft/CentOS-7-x86_64-DVD-1708.iso /media/CentOS</td><td align="center">挂载iso文件</td></tr><tr><td align="center">umount /dev/sda1</td><td align="center">取消挂载（umount 装置文件名或挂载点）</td></tr></tbody></table><h3 id="十、解压、缩压与打包、解包"><a href="#十、解压、缩压与打包、解包" class="headerlink" title="十、解压、缩压与打包、解包"></a>十、解压、缩压与打包、解包</h3><ol><li><p><strong>命令</strong>：tar<br><strong>命令含义</strong>：文件、目录打包、解包，并且支持将多个文件包成一个文件，同时还可通过gzip/bzip将该文件压缩。<br><strong>语法1</strong>：<strong><font color="green">tar [-czvf] 打包后文件名  文件或目录</font></strong><br><strong>语法2</strong>：<strong><font color="green">tar [-xzvf] 需要解包的文件名</font></strong><br><strong>常用参数说明</strong>：</p><table><thead><tr><th align="center">常用参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">新建打包文件，同 -v 一起使用 查看过程中打包文件名</td></tr><tr><td align="center">-C</td><td align="center">解压到对应的文件目录。</td></tr><tr><td align="center">-x</td><td align="center">解包文件</td></tr><tr><td align="center">-f</td><td align="center">后面接要处理的文件</td></tr><tr><td align="center">-j</td><td align="center">通过bzip2方式压缩或解压，最后以.tar.br2 为后缀。压缩后大小小于.tar.gz</td></tr><tr><td align="center">-z</td><td align="center">通过gzip方式压缩或解压，最后以.tar.gz 为后缀</td></tr><tr><td align="center">-v</td><td align="center">压缩或解压过程中，显示出来过程</td></tr><tr><td align="center">-t</td><td align="center">查看打包文件中内容，重点文件名</td></tr><tr><td align="center">-r</td><td align="center">添加文件到已经压缩的文件</td></tr><tr><td align="center">-u</td><td align="center">更新压缩文件中的内容。</td></tr><tr><td align="center">-p</td><td align="center">保留绝对路径，即允许备份数据中含有根目录</td></tr><tr><td align="center">-P</td><td align="center">保留数据原来权限及属性。</td></tr></tbody></table><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">tar -czvf fileName.tar.gz .</td><td align="center">压缩当前目录所有文件和目录到fileName.tar.gz包中</td></tr><tr><td align="center">tar -xzvf fileName.tar.gz</td><td align="center">解压fileName.tar.gz</td></tr><tr><td align="center">tar -tf 压缩文件名</td><td align="center">查看文件名</td></tr><tr><td align="center">tar -tvf 压缩文件</td><td align="center">查看文件：所属权限、用户名用户组、日期等</td></tr><tr><td align="center">tar -zcvf bak.tar.gz  bak.tar</td><td align="center">使用gzip将打包文件bak.tar压缩为bak.tar.gz</td></tr><tr><td align="center">tar -jcvf bak.tar.bz2  bak.tar</td><td align="center">使用bzip2将打包文件bak.tar压缩为bak.tar.bz2</td></tr><tr><td align="center">tar -rvf bak.tar /etc/password</td><td align="center">将/etc/password追加文件到bak.tar中</td></tr><tr><td align="center">tar -cvf bak.tar  .</td><td align="center">将当前目录的文件打包为bak.tar</td></tr><tr><td align="center">tar -cvf log.tar log2012.log</td><td align="center">仅打包，不压缩！</td></tr><tr><td align="center">tar -czvf log.tar.gz log2012.log</td><td align="center">打包后，以 gzip 压缩</td></tr><tr><td align="center">tar -czvf log.tar.bz2 log2012.log</td><td align="center">打包后，以 bzip2 压缩</td></tr></tbody></table><p><font color="red">说明：tar仅为打包解包命令，需要解压缩则需要跟上相应参数或指定包后缀格式</font></p></li><li><p><strong>命令</strong>：zip/unzip<br><strong>命令含义</strong>：压缩(解压)文件,压缩文件后缀为.zip<br><strong>语法1</strong>：<strong><font color="green">zip [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list] [-xi list]</font></strong><br><strong>语法2</strong>：<strong><font color="green">unzip [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir]</font></strong><br><strong>常用参数说明</strong>：</p><table><thead><tr><th align="center">常用参数</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">-q</td><td align="center">不显示指令执行过程。</td></tr><tr><td align="center">-r</td><td align="center">递归处理，将指定目录下的所有文件和子目录一并处理。</td></tr><tr><td align="center">-P</td><td align="center">压缩时为压缩包添加密码</td></tr><tr><td align="center">-o</td><td align="center">不必先询问用户，unzip执行后覆盖原有文件。</td></tr><tr><td align="center">-d</td><td align="center">解压时指定解压文件存放目录</td></tr><tr><td align="center">-t</td><td align="center">检查压缩文件是否正确。</td></tr><tr><td align="center">-j</td><td align="center">不处理压缩文件中原有的目录路径。</td></tr></tbody></table><p><strong>示例</strong>：</p><table><thead><tr><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">zip -r fileName.zip a目录</td><td align="center">把a目录以及子目录压缩为fileName.zip</td></tr><tr><td align="center">unzip fileName.zip -d a目录</td><td align="center">fileName.zip解压到a目录里面</td></tr><tr><td align="center">zip -r abc123.zip abc 123.txt</td><td align="center">把abc文件夹和123.txt压缩成为abc123.zip</td></tr><tr><td align="center">unzip fileName.zip</td><td align="center">把fileName.zip直接解压到当前目录下</td></tr><tr><td align="center">unzip abc*.zip</td><td align="center">把abc12.zip、abc23.zip、abc34.zip同时解压到当前目录</td></tr><tr><td align="center">unzip -v fileName.zip</td><td align="center">查看把/home目录下面的fileName.zip里面的内容</td></tr><tr><td align="center">unzip -t fileName.zip</td><td align="center">验证fileName.zip是否完整</td></tr><tr><td align="center">unzip -j fileName.zip</td><td align="center">把fileName.zip里面的所有文件解压到第一级目录</td></tr></tbody></table></li></ol><h3 id="十一、其他常用命令"><a href="#十一、其他常用命令" class="headerlink" title="十一、其他常用命令"></a>十一、其他常用命令</h3><ol><li><strong>通用命令</strong>：<table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">ls -l|grep &quot;^-&quot;| wc -l</td><td align="center">查看当前目录下的文件数量（不包含子目录中的文件）</td></tr><tr><td align="center">last</td><td align="center">显示近期用户或终端的成功登录情况。</td></tr><tr><td align="center">echo &gt; /var/log/wtmp</td><td align="center">清除登陆系统成功的记录(此文件默认打开时乱码)</td></tr><tr><td align="center">lastb</td><td align="center">记录失败的登录尝试</td></tr><tr><td align="center">echo &gt; /var/log/btmp</td><td align="center">清除登陆系统失败的记录</td></tr><tr><td align="center">history -c</td><td align="center">清除历史执行命令</td></tr><tr><td align="center">echo 3 &gt; /proc/sys/vm/drop_caches</td><td align="center">释放缓存空间</td></tr></tbody></table></li></ol><ol start="2"><li><strong>适用于CentOS、RedHat系统</strong><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">yum install 软件</td><td align="center">安装软件</td></tr><tr><td align="center">yum list installed |grep java</td><td align="center">列出已安装的java软件</td></tr><tr><td align="center">yum remove java-1.8.0-openjdk.x86_64</td><td align="center">卸载软件（卸载JDK）</td></tr><tr><td align="center">yum update [软件]</td><td align="center">更新软件、软件库</td></tr><tr><td align="center">wget -P /usr/local https://网址</td><td align="center">下载文件到指定目录</td></tr><tr><td align="center">rpm -ivh wps-office-版本.x86_64.rpm</td><td align="center">安装rpm包（包要先下载并且要先装依赖包，这里推荐使用yum安装软件可自动下载依赖包）</td></tr></tbody></table></li></ol><ol start="3"><li><strong>适用于适用于Ubuntu、Debian系统系统</strong><table><thead><tr><th align="center">命令</th><th align="center">命令含义</th></tr></thead><tbody><tr><td align="center">apt-get install 软件</td><td align="center">安装软件</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置浅谈-configure的参数配置说明</title>
      <link href="/2019/09/20/nginx%E9%85%8D%E7%BD%AE%E6%B5%85%E8%B0%88-configure%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2019/09/20/nginx%E9%85%8D%E7%BD%AE%E6%B5%85%E8%B0%88-configure%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th align="center">序号</th><th align="center">参数格式</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">–prefix=path</td><td align="center">定义安装目录</td></tr><tr><td align="center">2</td><td align="center">–sbin-path=path</td><td align="center">设置nginx可执行文件的路径</td></tr><tr><td align="center">3</td><td align="center">–modules-path=path</td><td align="center">定义将安装nginx动态模块的目录</td></tr><tr><td align="center">4</td><td align="center">–conf-path=path</td><td align="center">设置nginx.conf配置文件路径名</td></tr><tr><td align="center">5</td><td align="center">–error-log-path=path</td><td align="center">设置主要错误，警告和诊断文件的路径名</td></tr><tr><td align="center">6</td><td align="center">–pid-path=path</td><td align="center">设置nginx.pid将存储主进程的进程ID 的文件的路径名</td></tr><tr><td align="center">7</td><td align="center">–lock-path=path</td><td align="center">为锁定文件的名称设置前缀</td></tr><tr><td align="center">8</td><td align="center">–user=name</td><td align="center">设置非特权用户的名称，其凭据将由工作进程使用</td></tr><tr><td align="center">9</td><td align="center">–group=name</td><td align="center">设置其凭据将由工作进程使用的组的名称</td></tr><tr><td align="center">10</td><td align="center">–build=name</td><td align="center">设置编译名</td></tr><tr><td align="center">11</td><td align="center">-builddir=path</td><td align="center">置编译目录</td></tr><tr><td align="center">12</td><td align="center">–with-select_module、–without-select_module</td><td align="center">启用或禁用select事件驱动模型</td></tr><tr><td align="center">13</td><td align="center">–with-poll_module、–without-poll_module</td><td align="center">启用或禁用poll事件驱动模型</td></tr><tr><td align="center">14</td><td align="center">–with-threads</td><td align="center">启用线程池功能</td></tr><tr><td align="center">15</td><td align="center">–with-file-aio</td><td align="center">我们就可以启用线程池功能，让请求排队等待处理，并且可以充分利用CPU提高处理效率。开启线程池需要AIO的支持。 启用异步文件IO（AIO）支持。一般用于大文件传输的场景下。</td></tr><tr><td align="center">16</td><td align="center">–with-http_ssl_module</td><td align="center">将HTTPS协议支持添加到HTTP服务器。默认情况下不构建此模块。需要OpenSSL库来构建和运行此模块。</td></tr><tr><td align="center">17</td><td align="center">–with-http_v2_module</td><td align="center">启用HTTP_V2模块，新的HTTP协议，相比HTTP1更优更快。默认情况下不构建此模块。</td></tr><tr><td align="center">18</td><td align="center">–with-http_realip_module</td><td align="center">启用HTTP_Realip模块，用于修改客户端请求头中客户端IP地址值，一般用于反向代理中，将真实的客户端IP传送给后端的应用服务器。默认情况下不构建此模块。</td></tr><tr><td align="center">19</td><td align="center">–with-http_addition_module</td><td align="center">启用HTTP_Addition模块，用于在响应之前和之后添加文本。默认情况下不构建此模块。</td></tr><tr><td align="center">20</td><td align="center">–with-http_xslt_module</td><td align="center">启用HTTP_Xslt模块，这个模块是一个过滤器，它可以通过XSLT模板转换成XML响应。需要ibxml2和libxslt库的支持。默认情况下不构建此模块。</td></tr><tr><td align="center">21</td><td align="center">–with-http_xslt_module=dynamic</td><td align="center">启用HTTP_Xslt动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">22</td><td align="center">–with-http_image_filter_module</td><td align="center">启用HTTP_Image_Filter模块，这个模块是一个集成图片处理器，我们可以使用它转换JPEG、GIF、PNG和WEBP格式的图像，验证这些格式图像的有效型（是不是此格式的图像），输出JSON格式的图像信息，旋转图像，按比例缩放图像，剪切图片等。默认情况下不构建此模块。</td></tr><tr><td align="center">23</td><td align="center">–with-http_image_filter_module=dynamic</td><td align="center">启用HTTP_Image_Filter动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">24</td><td align="center">–with-http_geoip_module</td><td align="center">启用HTTP_Geoip模块，这个模块用于处理不同地区的访问，当来自某一个区域的访问时将其重定向到对应的服务或者项目上，需要MaxMind GeoIP库的支持。默认情况下不构建此模块。</td></tr><tr><td align="center">25</td><td align="center">–with-http_geoip_module=dynamic</td><td align="center">启用HTTP_Geoip动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">26</td><td align="center">–with-http_sub_module</td><td align="center">启用HTTP_Sub模块，这个模块是一个过滤器，用于修改响应的内容，可以将一个指定的字符串替换成另一个字符串。默认情况下不构建此模块。</td></tr><tr><td align="center">27</td><td align="center">–with-http_dav_module</td><td align="center">启用HTTP_DAV模块，用于通过WEBDAV协议提供WEB的文件管理功能，类似于一个WEB的文件管理器，可以对服务器的文件进行管理。默认情况下不构建此模块。</td></tr><tr><td align="center">28</td><td align="center">–with-http_flv_module</td><td align="center">启用HTTP_FLV模块，用于为Flash Video（FLV）文件提供伪流视频服务端支持，开启它则允许在网页上播放FLV格式的视频。默认情况下不构建此模块。</td></tr><tr><td align="center">29</td><td align="center">–with-http_mp4_module</td><td align="center">启用HTTP_MP4模块，用于为MP4格式的视频文件提供伪流视频服务端支持，开启它则允许在网页上播放MP4格式的视频。默认情况下不构建此模块。</td></tr><tr><td align="center">30</td><td align="center">–with-http_gunzip_module</td><td align="center">启用HTTP_Gunzip模块，用于为不支持”gzip”编码方式的客户端解压响应。</td></tr><tr><td align="center">31</td><td align="center">–with-http_gzip_static_module</td><td align="center">启用HTTP_Gzip_Static模块，用于将静态内容压缩成”.gz”为文件扩展名的预压缩文件，并缓存在本地，在响应时会将此文件发送以替代普通文件。</td></tr><tr><td align="center">32</td><td align="center">–with-http_auth_request_module</td><td align="center">启用HTTP_Auth_Request模块，此模块是一个请求验证模块，可以使用外部服务器或服务对网站的每个请求进行身份验证。当用户访问时，Nginx会向用于验证请求的外部服务器发出验证请求，若返回的状态码为200，则通过允许访问，若返回401或403，则访问会被拒绝。默认情况下不构建此模块。</td></tr><tr><td align="center">33</td><td align="center">–with-http_random_index_module</td><td align="center">启用HTTP_Random_Index模块，随机主页模块，当用户访问时，随机响应一个主页，而并非由”index”指令定义的一个主页，而是从主页池中随机选中一个主页面返回。默认情况下不构建此模块。</td></tr><tr><td align="center">34</td><td align="center">–with-http_secure_link_module</td><td align="center">启用HTTP_Secure_Link模块，防盗链模块，用于检查请求链接的权限以及是否过期，多用于文件下载防盗链。默认情况下不构建此模块。</td></tr><tr><td align="center">35</td><td align="center">–with-http_degradation_module</td><td align="center">启用HTTP_Degradation模块，用于当主机剩余内存较低时，用户请求访问，Nginx会对某些”location”的请求返回204或444的响应码。默认情况下不构建此模块。</td></tr><tr><td align="center">36</td><td align="center">–with-http_slice_module</td><td align="center">启用HTTP_Slice模块，此模块是一个过滤器，用于将一个大的完整的文件分割成多个小块文件，分段传送给用户，一般用于大文件传输的场景下，使用它可以让用户快速的得到响应。默认情况下不构建此模块。</td></tr><tr><td align="center">37</td><td align="center">–with-http_stub_status_module</td><td align="center">启用HTTP_Stub_Status模块，状态信息统计模块，用于返回一个Nginx状态信息统计信息页面，管理员访问这个页面可以获取Nginx的请求处理、当前连接、等待连接等统计信息，一般用于监控Nginx的运行状态。默认情况下不构建此模块。</td></tr><tr><td align="center">38</td><td align="center">–without-http_charset_module</td><td align="center">禁用HTTP_Charset模块，此模块用于将指定的字符集添加到”Content-Type”响应头字段中。此外此模块还可以将数据从一个字符集转换为另一个字符集，此模块用于字符集设置。不建议禁用。</td></tr><tr><td align="center">39</td><td align="center">–without-http_gzip_module</td><td align="center">禁用HTTP_Gzip模块，此模块用于HTTP响应内容传输压缩，可以将响应内存在传输时将其压缩成Gzip编码格式的响应传送给客户端，使用Gzip编码格式响应内容体积会变小，会提高传输效率。不建议禁用。</td></tr><tr><td align="center">40</td><td align="center">–without-http_ssi_module</td><td align="center">禁用HTTP_SSI模块，此模块是一个过滤器，用于处理通过它响应中的SSI（Server Side Includes）命令。目前支持的SSI命令列表并不完整，SSI指令是一种可以嵌入WEB页面的一种语法指令。</td></tr><tr><td align="center">41</td><td align="center">–without-http_userid_module</td><td align="center">禁用HTTP_Userid模块，此模块用于识别客户端的Cookie。可以使用嵌入变量”$uid_got”和”$uid_set”记录已接受和设置的Cookie。</td></tr><tr><td align="center">42</td><td align="center">–without-http_access_module</td><td align="center">禁用HTTP_Access模块，此模块用于限制对某些客户端地址的访问，Allow or Deny。不建议禁用。</td></tr><tr><td align="center">43</td><td align="center">–without-http_auth_basic_module</td><td align="center">禁用HTTP_Auth_Basic模块，该模块用于HTTP基本身份验证，使用用户名和密码来限制对资源的访问。</td></tr><tr><td align="center">44</td><td align="center">–without-http_mirror_module</td><td align="center">禁用HTTP_Mirror模块，该模块用于将正式环境的流量拷贝到镜像（测试）环境下，一般用于测试环境引入真实环境的流量实现对测试环境的压力测试。</td></tr><tr><td align="center">45</td><td align="center">–without-http_autoindex_module</td><td align="center">禁用HTTP_Autoindex模块，该模块用于在处理以斜杠字符（’/‘）结尾的请求，并在找不到索引文件的情况下生成目录列表。</td></tr><tr><td align="center">46</td><td align="center">–without-http_geo_module</td><td align="center">禁用HTTP_Geo模块，该模块用于从指定变量中获取客户端的IP地址，并将其嵌入到另外一个变量中。默认情况下从”$remote_addr”变量中取得客户端的IP地址。我们可以通过它结合”HTTP_Upstream”实现对来源客户端的负载均衡，当来自不同的客户端请求时，将其负载均衡给后端的不同的服务器处理；还可以使用它结合”HTTP_Map”+”HTTP_Limit_Conn”模块实现对来源客户端的限速功能。</td></tr><tr><td align="center">47</td><td align="center">–without-http_map_module</td><td align="center">禁用HTTP_Map模块，该模块用于创建一个变量的映射表，结果变量可以是一个字符串也可以是另外一个变量。</td></tr><tr><td align="center">48</td><td align="center">–without-http_split_clients_module</td><td align="center">禁用HTTP_Splic_Clients模块，该模块用于创建适用于A/B测试的变量，AB测试也称之为拆分测试，也就是将一个项目的两个不同版本发布，看用户更喜欢用于那个版本，若版本A受欢迎则发布版本A。</td></tr><tr><td align="center">49</td><td align="center">–without-http_referer_module</td><td align="center">禁用HTTP_Referer模块，该模块用于防盗链，用于阻止对请求头部”referer”字段具有无效值的请求访问，可以设置一个白名单，非白名单的无效来源网址的连接则会拒绝请求，使用此模块我们还需考虑到，即使对于有效的请求，常规浏览器也可能不发送”referer”字段。不建议禁用。</td></tr><tr><td align="center">50</td><td align="center">–without-http_rewrite_module</td><td align="center">禁用HTTP_Rewerte模块，该模块用于地址重写，用于将来源请求地址重定向到指定的地址上，可以保护真实的地址，增加安全性，该模块需要PCRE库的支持。不建议禁用。</td></tr><tr><td align="center">51</td><td align="center">–without-http_proxy_module</td><td align="center">禁用HTTP_Proxy模块，该模块用于将请求代理传递到另外一台WEB服务器去处理，Nginx的核心模块。不建议禁用。</td></tr><tr><td align="center">52</td><td align="center">–without-http_fastcgi_module</td><td align="center">禁用HTTP_FastCGI模块，该模块用于将请求代理传递到另外一台FastCGI服务器去处理，一般用于反代PHP。不建议禁用。</td></tr><tr><td align="center">53</td><td align="center">–without-http_uwsgi_module</td><td align="center">禁用HTTP_UwSGI模块，该模块用于将请求代理传递给另外一台UwSGI服务器去处理。</td></tr><tr><td align="center">54</td><td align="center">–without-http_scgi_module</td><td align="center">禁用HTTP_SCGI模块，该模块用于将请求代理传递给另外一台SCGI服务器去处理。</td></tr><tr><td align="center">55</td><td align="center">–without-http_grpc_module</td><td align="center">禁用HTTP_Grpc模块，该模块用于将请求代理传递给另外一台Grpc服务器去处理。</td></tr><tr><td align="center">56</td><td align="center">–without-http_memcached_module</td><td align="center">禁用HTTP_Memcached模块，该模块用于Nginx从Memcached服务器获取响应内容。</td></tr><tr><td align="center">57</td><td align="center">–without-http_limit_conn_module</td><td align="center">禁用HTTP_Limit_Conn模块，该模块用于限制并发连接数量以及下载带宽限制。</td></tr><tr><td align="center">58</td><td align="center">–without-http_limit_req_module</td><td align="center">禁用HTTP_Limit_Req模块，该模块用于限制请求数量，可以限制请求的频率。</td></tr><tr><td align="center">59</td><td align="center">–without-http_empty_gif_module</td><td align="center">禁用HTTP_Empty_Gif模块，该模块会在内容中常驻的一个1X1的透明空白的GIF图像，当用户请求时，返回该图像，一般用于测试。</td></tr><tr><td align="center">60</td><td align="center">–without-http_browser_module</td><td align="center">禁用HTTP_Browser模块，该模块用于创建变量，变量的值取决于请求头中”user-agent”的值，一般用于区别新式或者旧式浏览器，若新式浏览器则将请求重定向到新式的WEB页面中，呈现新页面，若为旧式浏览器则将返回旧式的WEB页面。</td></tr><tr><td align="center">61</td><td align="center">–without-http_upstream_hash_module</td><td align="center">禁用HTTP_Upstream_Hash模块，该模块提供了由”Upstream”指令定义的一组服务器的负载均衡方法”Hash”，该方法基于散列键值（hash），它会将客户端+服务端的映射关系存放到一个散列键值表中，当客户端第二次请求时则会匹配关系将请求转发至后端的同一台服务器上，实现会话保持功能。该模块提供指令”hash”,在会话保持中，我们唯一能标识客户端的标志就是SessionID，所以我们可以使用指令”hash $cookie_jsession”实现会话保持功能。不建议禁用。</td></tr><tr><td align="center">62</td><td align="center">–without-http_upstream_ip_hash_module</td><td align="center">禁用HTTP_Upstream_IP_Hash模块，该模块提供了由”Upstream”指令定义的一组服务器的负载均衡方法”ip_hash”，该方法也用于会话保持，不过它是基于客户端IP的Hash方法，由于用户可能是ADSL接入的网络，所以客户端可能受动态IP影响会发生变化，所以一般不建议采用这种方法。</td></tr><tr><td align="center">63</td><td align="center">–without-http_upstream_least_conn_module</td><td align="center">禁用HTTP_Upstream_Least_Conn模块，该模块提供了由”Upstream”指令定义的一组服务器的负载均衡方法”least_conn”，该方法用于将请求传递到具有最少活动连接、权重较高（性能最好）的后端服务器上去处理。</td></tr><tr><td align="center">64</td><td align="center">–without-http_upstream_keepalive_module</td><td align="center">禁用HTTP_Upstream_Keepalive模块，该模块可以为由”Upstream”指令定义的一组服务器提供保持长连接的功能，使用它则会为每个Worker工作进程与后端服务器保持空闲的长连接，连接数由”keepalive”指令指定，当空闲的长连接数量超过指定值时，将关闭最近最少使用的连接。</td></tr><tr><td align="center">65</td><td align="center">–without-http_upstream_zone_module</td><td align="center">禁用HTTP_Upstream_Zone模块，该模块可以将由”Upstream”指令定义的服务器组运行时的状态存储在共享内存区域中。</td></tr><tr><td align="center">66</td><td align="center">–with-http_perl_module、–with-http_perl_module=dynamic</td><td align="center">启用HTTP_Perl模块，用于在Perl中实现位置和变量处理程序，并可以将Perl调用到SSI中。默认情况下不构建此模块。 启用HTTP_Perl动态模块，允许在配置文件中通过”load_module”指定手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">67</td><td align="center">–with-perl_modules_path=PATH</td><td align="center">置一个用于保留Perl模块的目录路径。</td></tr><tr><td align="center">68</td><td align="center">–with-perl=PATH</td><td align="center">设置Perl可执行命令文件的路径。</td></tr><tr><td align="center">69</td><td align="center">–http-log-path=PATH</td><td align="center">设置访问日志文件存放目录路径。安装后，可以在主配置文件中使用”access_log”指令修改。</td></tr><tr><td align="center">70</td><td align="center">–http-client-body-temp-path=PATH</td><td align="center">设置用于存储客户端请求主体的临时文件存放目录路径。安装后，可以在主配置文件中使用”client_body_temp_path”指令修改。</td></tr><tr><td align="center">71</td><td align="center">–http-proxy-temp-path=PATH</td><td align="center">设置用于存储从代理服务器接受的数据临时文件存放目录路径。安装后，可以在主配置文件中使用”proxy_temp_path”指令修改。</td></tr><tr><td align="center">72</td><td align="center">–http-fastcgi-temp-path=PATH</td><td align="center">设置用于存储从FastCGI服务器接受的数据临时文件存放目录路径。安装后，可以在主配置文件中使用”fastcgi_temp_path”指令修改。</td></tr><tr><td align="center">73</td><td align="center">–http-uwsgi-temp-path=PATH</td><td align="center">设置用于存储从UwSGI服务器接受的数据临时文件存放目录路径。安装后，可以在主配置文件中使用”uwsgi_temp_path”指令修改。</td></tr><tr><td align="center">74</td><td align="center">–http-scgi-temp-path=PATH</td><td align="center">设置用于存储从SCGI服务器接受的数据临时文件存放目录路径。安装后，可以在主配置文件中使用”scgi_temp_path”指令修改。</td></tr><tr><td align="center">75</td><td align="center">–without-http</td><td align="center">禁用HTTP_Core模块，该模块为Nginx的核心模块，用于提供HTTP服务所有核心功能。</td></tr><tr><td align="center">76</td><td align="center">–without-http-cache</td><td align="center">禁用HTTP缓存。</td></tr><tr><td align="center">77</td><td align="center">–with-mail</td><td align="center">启用HTTP_Mail_Core模块，该模块为Nginx的核心模块，用于提供POP3/IMAP4/SMTP邮件代理服务。默认情况下不构建此模块。</td></tr><tr><td align="center">78</td><td align="center">–with-mail=dynamic</td><td align="center">启用HTTP_Mail_Core动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">79</td><td align="center">–with-mail_ssl_module</td><td align="center">启用Mail_SSL模块，用于邮件代理服务支持SSL/TLS协议，需要OpenSSL库的支持。默认情况下不构建此模块。</td></tr><tr><td align="center">80</td><td align="center">–without-mail_pop3_module</td><td align="center">禁用Mail_POP3模块，当启用HTTP_Mail_Core模块时，若你不想使用POP3协议，则可以考虑单独禁用此模块。不建议禁用。</td></tr><tr><td align="center">81</td><td align="center">–without-mail_imap_module</td><td align="center">禁用Mail_IMAP模块，当启用HTTP_Mail_Core模块时，若你不想使用IMAP4协议，则可以考虑单独禁用此模块。不建议禁用。</td></tr><tr><td align="center">82</td><td align="center">–without-mail_smtp_module</td><td align="center">禁用Mail_SMTP模块，当启用HTTP_Mail_Core模块时，若你不想使用SMTP协议，则可以考虑单独禁用此模块。不建议禁用。</td></tr><tr><td align="center">83</td><td align="center">–with-stream</td><td align="center">启用Stream_Core模块，Nginx的核心模块，用于实现TCP/UDP代理和四层负载均衡功能。默认情况下不构建此模块。此模块自Nginx1.9.0版本开始可用。</td></tr><tr><td align="center">84</td><td align="center">–with-stream=dynamic</td><td align="center">启用Stream_Core动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">85</td><td align="center">–with-stream_ssl_module</td><td align="center">启用Stream_SSL模块，用于提供SSL/TLS协议支持，需要OpenSSL库的支持。该模块用于Nginx四层负载功能中使用，需要开启Stream_Core模块。默认情况下不构建此模块。</td></tr><tr><td align="center">86</td><td align="center">–with-stream_realip_module</td><td align="center">启用Stream_Realip模块，用于修改客户端请求头中客户端IP地址值，一般用于反向代理中，将真实的客户端IP传送给后端的应用服务器。该模块用于Nginx四层负载功能中使用，需要开启Stream_Core模块。默认情况下不构建此模块。</td></tr><tr><td align="center">87</td><td align="center">–with-stream_geoip_module</td><td align="center">启用Stream_Geoip模块，用于处理不同地区的访问，当来自某一个区域的访问时将其重定向到对应的服务或者项目上，需要MaxMind GeoIP库的支持。该模块用于Nginx四层负载功能中使用，需要开启Stream_Core模块。默认情况下不构建此模块。</td></tr><tr><td align="center">88</td><td align="center">–with-stream_geoip_module=dynamic</td><td align="center">启用Stream_Geoip动态模块，允许在配置文件中通过”load_module”指令手动启用和禁用模块的使用。默认情况下不构建此模块。</td></tr><tr><td align="center">89</td><td align="center">–with-stream_ssl_preread_module</td><td align="center">启用Stream_SSL_Preread模块，用于从客户端Hello消息中提取信息，而不会终止SSL/TLS。该模块用于Nginx四层负载功能中使用，需要开启Stream_Core模块。默认情况下不构建此模块。</td></tr><tr><td align="center">90</td><td align="center">–without-stream_limit_conn_module</td><td align="center">禁用Stream_Limit_Conn模块，该模块用于限制并发连接数量以及下载带宽限制功能。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">91</td><td align="center">–without-stream_access_module</td><td align="center">禁用Stream_Access模块，该模块用于限制对某些客户端地址的访问。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">92</td><td align="center">–without-stream_geo_module</td><td align="center">禁用Stream_Geo模块，该模块用于从指定变量中获取客户端的IP地址，并将其嵌入到另外一个变量中。默认情况下从”$remote_addr”变量中取得客户端的IP地址。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">93</td><td align="center">–without-stream_map_module</td><td align="center">禁用Stream_Map模块，该模块用于创建一个变量的映射表，结果变量可以是一个字符串也可以是另外一个变量。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">94</td><td align="center">–without-stream_split_clients_module</td><td align="center">禁用Stream_Splic_Clients模块，该模块用于创建适用于A/B测试的变量，AB测试也称之为拆分测试，也就是将一个项目的两个不同版本发布，看用户更喜欢用于那个版本，若版本A受欢迎则发布版本A。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。</td></tr><tr><td align="center">95</td><td align="center">–without-stream_return_module</td><td align="center">禁用Stream_Return模块，该模块用于向客户端发送指定值，然后关闭连接。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">96</td><td align="center">–without-stream_upstream_hash_module</td><td align="center">禁用Stream_Upstream_Hash模块，该模块提供四层负载均衡的一种调度方法，一般用于基于SessionID的会话保持场景下，当开启Stream_Core模块时自动开启此功能。不建议禁用。</td></tr><tr><td align="center">97</td><td align="center">–without-stream_upstream_least_conn_module</td><td align="center">禁用Stream_Upstream_IP_Hash模块，该模块提供四层负载均衡的一种调度方法，基于来源IP的会话保持方法，由于来源IP的不稳定性，我们一般很少采用此种方法。当开启Stream_Core模块时自动开启此功能。</td></tr><tr><td align="center">98</td><td align="center">–without-stream_upstream_zone_module</td><td align="center">禁用Stream_Upstream_Zone模块，该模块可以将由”Upstream”指令定义的服务器组运行时的状态存储在共享内存区域中。该模块用于Nginx四层负载功能中使用，当开启Stream_Core模块时自动开启此功能。</td></tr><tr><td align="center">99</td><td align="center">–with-google_perftools_module</td><td align="center">启用Google_Perftools模块，用于可以使用Google Performance Tools分析Nginx的工作进程，分析程序性能瓶颈。该模块适用于Nginx开发人员，默认情况下不构建此模块。</td></tr><tr><td align="center">100</td><td align="center">–with-cpp_test_module</td><td align="center">启用Cpp_Test模块，用于C++测试。该模块适用于Nginx开发人员，默认情况下不构建此模块。</td></tr><tr><td align="center">101</td><td align="center">–add-module=PATH</td><td align="center">添加第三方模块，需要指定第三方模块所在目录路径。</td></tr><tr><td align="center">102</td><td align="center">–add-dynamic-module=PATH</td><td align="center">添加第三方动态模块，需要指定第三方动态模块所在目录路径。</td></tr><tr><td align="center">103</td><td align="center">–with-compat</td><td align="center">启用动态模块兼容性。</td></tr><tr><td align="center">104</td><td align="center">–with-cc=PATH</td><td align="center">设置GCC编译器所在目录路径。</td></tr><tr><td align="center">105</td><td align="center">–with-cpp=PATH</td><td align="center">设置GCC-C++编译器所在目录路径。</td></tr><tr><td align="center">106</td><td align="center">–with-cc-opt=OPTIONS</td><td align="center">设置将添加到CFLAGS变量的其他参数</td></tr><tr><td align="center">107</td><td align="center">–with-ld-opt=OPTIONS</td><td align="center">设置将在连接期间使用的其他参数</td></tr><tr><td align="center">108</td><td align="center">–with-cpu-opt=CPU</td><td align="center">设置CPU型号，为特定的CPU执行编译操作，有效的值：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64,ppc64。</td></tr><tr><td align="center">109</td><td align="center">–without-pcre</td><td align="center">禁用PCRE库的使用。</td></tr><tr><td align="center">110</td><td align="center">–with-pcre</td><td align="center">启用PCRE库的使用。PCRE库是一个Perl库，包含Perl兼容的正则表达式。</td></tr><tr><td align="center">111</td><td align="center">–with-pcre=DIR</td><td align="center">若你是源码安装的PCRE库，则需要通过此项设置PCRE库的所在目录路径。</td></tr><tr><td align="center">112</td><td align="center">–with-pcre-opt=OPTIONS</td><td align="center">为PCRE设置其他要编译的选项。</td></tr><tr><td align="center">113</td><td align="center">–with-pcre-jit</td><td align="center">启用”即时编译”的支持，开启此项，则会利用”pcre_jit”指令快速编译PCRE库。</td></tr><tr><td align="center">114</td><td align="center">–with-zlib=DIR</td><td align="center">若你是源码安装的Zlib库，则需要通过此项设置Zlib库的所在目录路径。当启用HTTP_Gzip模块的时候需要此库的支持。</td></tr><tr><td align="center">115</td><td align="center">–with-zlib-opt=OPTIONS</td><td align="center">为Zlib设置其他要编译的选项。</td></tr><tr><td align="center">116</td><td align="center">–with-zlib-asm=CPU</td><td align="center">为Zlib库的编译设置特定CPU，会加快编译速度，有效值：pentium, pentiumpro。</td></tr><tr><td align="center">117</td><td align="center">–with-libatomic</td><td align="center">启用Libatomic_Ops库的使用。</td></tr><tr><td align="center">118</td><td align="center">–with-libatomic=DIR</td><td align="center">若你是源码安装的Libatomic_Ops库，则需要通过此项设置Libatomic_Ops库的所在目录路径。</td></tr><tr><td align="center">119</td><td align="center">–with-openssl=DIR</td><td align="center">若你是源码安装的OpenSSL库，则需要通过此项设置OpenSSL库的所在目录路径。</td></tr><tr><td align="center">120</td><td align="center">–with-openssl-opt=OPTIONS</td><td align="center">为OpenSSL设置其他要编译的选项。</td></tr><tr><td align="center">121</td><td align="center">–with-debug</td><td align="center">启用调试级别的日志。也可以手动修改主配置文件，使用”error_log /path/to/log debug;”指令设置调试级别的日志。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> linux </tag>
            
            <tag> 说明书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置浅谈-nginx.conf</title>
      <link href="/2019/09/17/nginx%E9%85%8D%E7%BD%AE%E6%B5%85%E8%B0%88-nginx-conf/"/>
      <url>/2019/09/17/nginx%E9%85%8D%E7%BD%AE%E6%B5%85%E8%B0%88-nginx-conf/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>nginx.conf配置总体说明以及示例；</li><li>nginx安装；</li><li>源码编译构建nginx时配置参数详细说明；</li><li>nginx.conf中的负载均衡的配置详解；</li><li>nginx的访问权限配置(基于ip和账号密码的两种方式)；</li><li>https的访问配置；</li><li>新增stream模块以支持tcp代理(2019.12.03)；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>使用到linux系统：CentOS 7.2；</li><li>使用到的nginx版本：1.15.2</li></ol><h3 id="三、nginx-conf配置总体说明以及示例"><a href="#三、nginx-conf配置总体说明以及示例" class="headerlink" title="三、nginx.conf配置总体说明以及示例"></a>三、nginx.conf配置总体说明以及示例</h3><ol><li><strong><font color="green">全局块</font></strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li><strong><font color="green">events块</font></strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li><strong><font color="green">http块</font></strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li><strong><font color="green">server块</font></strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li><strong><font color="green">location块</font></strong>：配置请求的路由，以及各种页面的处理情况。</li><li><strong><font color="green">upstream块</font></strong>：用来配置后台服务器负载均衡用的。<br><a href="http://staticfile.erdongchen.top/download/config.example.conf?n=nginx" title="点击下载nginx.conf" target="_blank" rel="noopener"><strong><font color="purple">nginx.conf配置文件示例下载</font></strong></a><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190917/config.example.png" align="left/"></li></ol><h3 id="四、nginx安装"><a href="#四、nginx安装" class="headerlink" title="四、nginx安装"></a>四、nginx安装</h3><ol><li>安装编译环境<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gccyum -y <span class="token function">install</span> gcc++yum -y <span class="token function">install</span> gcc-c++yum -y <span class="token function">install</span> <span class="token function">wget</span>yum -y <span class="token function">install</span> pcre-develyum -y <span class="token function">install</span> zlib zlib-devel<span class="token comment" spellcheck="true"># https配置需要</span>yum -y <span class="token function">install</span> openssl openssl-devel</code></pre></li><li>下载nginx安装包<br>建议下载稳定版本（Stable version）：<a href="http://nginx.org/en/download.html" title="点击下载" target="_blank" rel="noopener">nginx官网下载</a>,然后把包上传到linux上<br><font color="red">或者</font>在linux使用如下命令下载nginx-1.16.1安装包：<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.16.1.tar.gz</code></pre></li><li>解压nginx安装包<pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf nginx-1.16.1.tar.gz -C /usr/local/</code></pre><font color="green">参数 -C 解压到指定路径下</font></li><li>源码编译安装nginx<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入nginx目录</span><span class="token function">cd</span> /usr/local/nginx-1.16.1<span class="token comment" spellcheck="true"># 小白推荐执行命令</span><span class="token function">bash</span> configure<span class="token comment" spellcheck="true"># 老鸟推荐执行脚本(带https配置、可自定义配置各类参数)</span><span class="token function">bash</span> configure --prefix<span class="token operator">=</span>/usr/local/nginx --sbin-path<span class="token operator">=</span>/usr/local/nginx/sbin/nginx --conf-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.conf --error-log-path<span class="token operator">=</span>/usr/local/nginx/logs/error.log --http-log-path<span class="token operator">=</span>/usr/local/nginx/logs/access.log --pid-path<span class="token operator">=</span>/usr/local/nginx/logs/nginx.pid --lock-path<span class="token operator">=</span>/usr/local/nginx/lock/nginx.lock --user<span class="token operator">=</span>root --group<span class="token operator">=</span>root --with-http_ssl_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module  --with-debug --http-client-body-temp-path<span class="token operator">=</span>/usr/local/nginx/temp --with-stream<span class="token comment" spellcheck="true"># 执行命令</span><span class="token function">make</span><span class="token comment" spellcheck="true"># 执行make install命令</span><span class="token function">make</span> <span class="token function">install</span></code></pre></li><li>配置环境变量<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑  /etc/profile</span>vim /etc/profile<span class="token comment" spellcheck="true"># 在末尾追加</span><span class="token function">export</span> NGINX_HOME<span class="token operator">=</span>/usr/local/nginx<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$NGINX_HOME</span>/sbin<span class="token comment" spellcheck="true"># 重新编译 /etc/profile 文件</span><span class="token function">source</span> /etc/profile</code></pre><font color="red">防坑：/usr/local/nginx 是你安装nginx的目录</font></li><li>安装验证,利用nginx -v 来查看安装是否正确，以及相关的nginx信息。<pre class=" language-bash"><code class="language-bash">nginx -v</code></pre></li><li>根据具体项目所需配置nginx.conf文件</li><li>nginx相关命令<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Nginx检测</span>nginx -t<span class="token comment" spellcheck="true"># 启动</span>nginx<span class="token comment" spellcheck="true"># 平滑重启</span>nginx -s reload<span class="token comment" spellcheck="true"># 快速停止（立即停止服务,这种方法比较强硬，无论进程是否在工作，都直接停止进程。）</span>nginx -s stop<span class="token comment" spellcheck="true"># 正常停止（从容停止服务,这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。）</span>nginx -s quit</code></pre></li></ol><h3 id="五、源码编译构建nginx时配置参数详细说明"><a href="#五、源码编译构建nginx时配置参数详细说明" class="headerlink" title="五、源码编译构建nginx时配置参数详细说明"></a>五、源码编译构建nginx时配置参数详细说明</h3><ol><li>在解压的目录有个文件configure，运行./configure –-help 可以看到大量的参数显示。</li><li>configure的参数分为四大类：路径相关、编译相关、依赖软件相关、模块相关<br><a href="https://myblog.erdongchen.top/2019/09/20/nginx配置浅谈-configure的参数配置说明/" title="查看详情"><strong><font color="red">configure参数配置说明书</font></strong></a></li></ol><h3 id="六、nginx-conf中的负载均衡的配置详解"><a href="#六、nginx-conf中的负载均衡的配置详解" class="headerlink" title="六、nginx.conf中的负载均衡的配置详解"></a>六、nginx.conf中的负载均衡的配置详解</h3><p>负载均衡一般配置在upstream块中，负载均衡的几种方式：</p><ol><li>轮询（默认）<br>每个请求会按时间顺序逐一分配到不同的后端服务器。在轮询中，如果服务器down掉了，会自动剔除该服务器。<font color="red">缺省配置就是轮询策略</font>。此策略适合服务器配置相当，无状态且短平快的服务使用。</li><li>weight（权重）<br>在轮询策略的基础上指定轮询的几率。权重越高分配到需要处理的请求越多。此策略可以与ip_hash和least_conn结合使用。此策略比较适合服务器的硬件配置差别比较大的情况。<br>eg：<pre><code># 动态负载均衡服务器组upstream dynamic_balance { server localhost:8080 weight=2; server localhost:8081 weight=5; server localhost:8082 weight=3;}</code></pre></li><li>ip_hash（根据ip分配）<br>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。在Nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）。ip_hash不能与backup同时使用。此策略适合有状态服务，比如session。当有服务器需要剔除，必须手动down掉。<br>eg:<pre><code>upstream dynamic_balance { ip_hash;    # 保证每个访客固定访问一个后端服务器 server localhost:8080 weight=2; server localhost:8081; server localhost:8082;}</code></pre></li><li>least_conn（最少连接）<br>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。<br>eg:<pre><code>upstream dynamic_balance { least_conn;    # 把请求转发给连接数较少的后端服务器 server localhost:8080 weight=2; server localhost:8081; server localhost:8082;}</code></pre></li><li>fair（响应时间 - 第三方）<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br>eg:<pre><code>upstream resinserver{ server server1; server server2; fair;}</code></pre></li><li>url_hash（根据url分配 - 第三方）<br>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法<br>eg:<pre><code>upstream resinserver{ server squid1:3128; server squid2:3128; hash $request_uri; hash_method crc32;}</code></pre>参数说明：<table><thead><tr><th align="center">参数名称</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">fail_timeout</td><td align="center">与max_fails结合使用。</td></tr><tr><td align="center">max_fails</td><td align="center">设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td></tr><tr><td align="center">fail_time</td><td align="center">服务器会被认为停机的时间长度，默认为10s。</td></tr><tr><td align="center">backup</td><td align="center">标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</td></tr><tr><td align="center">down</td><td align="center">标记服务器永久停机了。</td></tr></tbody></table></li></ol><h3 id="七、nginx的访问权限配置"><a href="#七、nginx的访问权限配置" class="headerlink" title="七、nginx的访问权限配置"></a>七、nginx的访问权限配置</h3><ol><li>基于ip的配置<br>介绍： 访问权限可以通过配置基于ip的访问控制，达到让某些ip能够访问，限制哪些ip不能访问的效果<br><br>允许访问的配置方法<br>配置语法：allow address | CIDR | unix | all;<br>默认配置：没有配置<br>配置路径：http、server、location、limit_except下；<br><br>不允许访问的配置方法<br>配置语法：deny address | CIDR | unix | all;<br>默认配置：没有配置<br>配置路径：http、server、location、limit_except下；</li></ol><p>例子：</p><pre><code>location {    # 拒绝此IP访问    deny 192.168.1.1;    # 允许该网段访问    allow 192.168.1.0/24;    # 拒绝所有    deny all;}</code></pre><p><font color="red">从上到下开始匹配，匹配到了则停止。</font></p><ol start="2"><li>基于账号密码的配置<br>①. 安装软件httpd<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> httpd</code></pre>②. 创建密码文件<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># /usr/local/nginx1.16.1/mypasswd 生成密码文件的全路径</span><span class="token comment" spellcheck="true"># test 用户名</span><span class="token comment" spellcheck="true"># 123456 密码</span>htpasswd -c -b /usr/local/nginx1.16.1/mypasswd  <span class="token function">test</span>  123456</code></pre>③. 配置nginx.conf<br>需要配置的参数：<strong><font color="purple">auth_basic、auth_basic_user_file</font></strong><br>参数说明：<table><thead><tr><th align="center">参数名</th><th align="center">配置语法</th><th align="center">默认配置</th><th align="center">可配置的区域块</th></tr></thead><tbody><tr><td align="center">auth_basic</td><td align="center">string or off</td><td align="center">off</td><td align="center">http、server、location</td></tr><tr><td align="center">auth_basic_user_file</td><td align="center">密码路径</td><td align="center">/</td><td align="center">http、server、location</td></tr></tbody></table></li></ol><p>账号密码配置示例：</p><pre><code>server {    listen       80;    server_name  staticfile.erdongchen.top;    charset utf-8;    # 目录    root /usr/local/staticFiles;    #开启目录文件列表    autoindex on;    # 显示出文件的确切大小，单位是bytes    autoindex_exact_size on;    # 显示的文件时间为文件的服务器时间    autoindex_localtime on;    location /web/excelAddr/ {        # 这里是验证时的提示信息        auth_basic &quot;Please input password&quot;;        # 密码文件所在的位置        auth_basic_user_file /usr/local/mypasswd;    }    location /files_bak/ {        deny all; # 不允许访问    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}</code></pre><p>④. 最终效果图<br><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20190917/authority_file.png" align="left/"></p><h4 id="附：htpasswd命令及其参数含义说明"><a href="#附：htpasswd命令及其参数含义说明" class="headerlink" title="附：htpasswd命令及其参数含义说明"></a>附：htpasswd命令及其参数含义说明</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建密码文件并且添加用户，</span>htpasswd -c  -b  文件名 用户名   密码<span class="token comment" spellcheck="true"># 添加用户不创建文件</span>htpasswd  -b   用户名   密码<span class="token comment" spellcheck="true"># 删除用户和密码</span>htpasswd -D  文件名   用户名<span class="token comment" spellcheck="true"># 修改密码 ：就是删除用户然后创建用户</span>htpasswd -D  文件名   用户名htpasswd  -b   用户名   密码</code></pre><p>参数含义：</p><table><thead><tr><th align="center">参数名</th><th align="center">配置语法</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">创建加密文件</td></tr><tr><td align="center">-n</td><td align="center">不更新加密文件，只将加密的用户密码显示在屏幕上</td></tr><tr><td align="center">-m</td><td align="center">默认采用MD5算法进行加密</td></tr><tr><td align="center">-d</td><td align="center">采用CRYPT算法对密码进行加密</td></tr><tr><td align="center">-p</td><td align="center">不对密码进行加密 ，即明文密码</td></tr><tr><td align="center">-s</td><td align="center">采用SHA算法对密码进行加密</td></tr><tr><td align="center">-b</td><td align="center">在命令行中一并输入用户名和密码而不是根据提示输入密码</td></tr><tr><td align="center">-D</td><td align="center">删除指定的用户</td></tr></tbody></table><h3 id="八、https的访问配置"><a href="#八、https的访问配置" class="headerlink" title="八、https的访问配置"></a>八、https的访问配置</h3><ol><li><p>查看是否有ssl模块</p><pre class=" language-bash"><code class="language-bash">nginx -V</code></pre><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20190917/qianzhi.png" align="left/"></li><li><p>如果没有上面这个就需要添加此模块：<br>nginx解压目录执行：</p><pre class=" language-bash"><code class="language-bash">./configure --with-http_ssl_module<span class="token function">make</span></code></pre><p>此时，在objs下回生成新的nginx文件，覆盖到安装目录的sbin目录下面<br><strong><font color="red">防坑：在执行完make命令后，如果不执行make install则是添加模块，就需要把新的nginx文件覆盖到安装目录的sbin目录下！！如果接着执行make install，则表示重新安装nginx！</font></strong></p></li><li><p>SSL证书申请，并放置到服务器上<br>证书申请可以在阿里云上申请或者腾讯云上也可以申请，有免费的，实在不行还可以自己创建证书；<br>阿里云申请地址：<a href="https://www.aliyun.com/product/cas" title="阿里云" target="_blank" rel="noopener"><strong><font color="purple">申请</font></strong></a></p></li><li><p>nginx.conf配置中配置SSL实现https访问<br>配置示例：</p><pre><code># http/https 静态文件访问地址server { listen       80; listen       443 ssl; server_name  staticfile.erdongchen.top; charset utf-8; # ssl证书地址 ssl_certificate     /usr/local/staticfile.pem;  # pem文件的路径 ssl_certificate_key  /usr/local/staticfile.key; # key文件的路径 # ssl验证相关配置 #缓存有效期 ssl_session_timeout  5m; #加密算法 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #安全链接可选的加密协议 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #使用服务器端的首选算法 ssl_prefer_server_ciphers on; # 目录 root /usr/local/staticFiles; #开启目录文件列表 autoindex on; # 显示出文件的确切大小，单位是bytes autoindex_exact_size on; # 显示的文件时间为文件的服务器时间 autoindex_localtime on; location /web/excelAddr/ {     # 这里是验证时的提示信息     auth_basic &quot;Please input password&quot;;     # 密码文件所在的位置     auth_basic_user_file /usr/local/mypassword; } location /files_bak/ {     deny all; # 不允许访问 } error_page   500 502 503 504  /50x.html; location = /50x.html {     root   html; }}</code></pre></li><li><p>访问https<br><a href="https://staticfile.erdongchen.top/" title="我的博客" target="_blank" rel="noopener"><strong><font color="purple">https://staticfile.erdongchen.top/</font></strong></a><br>此配置也可以使用http访问<br><a href="http://staticfile.erdongchen.top/" title="我的博客" target="_blank" rel="noopener"><strong><font color="purple">http://staticfile.erdongchen.top/</font></strong></a></p></li></ol><h3 id="九、新增stream模块以支持tcp代理-2019-12-03"><a href="#九、新增stream模块以支持tcp代理-2019-12-03" class="headerlink" title="九、新增stream模块以支持tcp代理(2019.12.03)"></a>九、新增stream模块以支持tcp代理(2019.12.03)</h3><p>由于个人项目上需要用到tcp代理的需求，这里记录一下通过配置nginx来实现tcp的代理转发：</p><ol><li><p>检查自己已经安装的nginx有没有支持stream模块：</p><pre class=" language-bash"><code class="language-bash">nginx -V</code></pre><p>如果在configure arguments 栏没有<code>--with-stream</code>模块，则表明nginx没有此模块；</p></li><li><p>上述命令执行的结果里面有configure arguments，把里面参数复制一份，停掉nginx，然后在nginx安装目录执行命令 </p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 备注：--with-http_ssl_module是之前带的模块（有多少模块带多少），再在后面追加--with-stream</span>./configure --with-http_ssl_module --with-stream</code></pre></li><li><p>编译完成之后，在执行<code>make</code>命令；</p></li><li><p>如果没有报错，会在nginx安装目录下的objs目录生成nginx文件，把该文件覆盖到sbin目录</p></li><li><p>配置stream模块，例如：<br>nginx.conf 主配置文件：</p><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20190917/9.1.png" align="left/"><p>引入的外部文件配置：</p><img style="width:85%;height:85%" src="https://staticfile.erdongchen.top/blog/blogPicture/20190917/9.2.png" align="left/"></li><li><p>文件配置完毕之后，先检查配置是否正确：<code>nginx -t</code>,在启动nginx；这时便可以使用ngixn所在的服务器ip+端口（我这里配置的是80端口），nginx会自动将请求转发到192.168.1.184的2181端口上；步骤到这里就已经配置完毕了，实现了ip+端口的方式代理tcp请求，此配置也可以实现像mysql或者redis等等的tcp转发；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国外VPS搭建SSR教程</title>
      <link href="/2019/09/06/%E5%9B%BD%E5%A4%96VPS%E6%90%AD%E5%BB%BASSR%E6%95%99%E7%A8%8B/"/>
      <url>/2019/09/06/%E5%9B%BD%E5%A4%96VPS%E6%90%AD%E5%BB%BASSR%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程用的软件、技术和环境"><a href="#一、本篇教程用的软件、技术和环境" class="headerlink" title="一、本篇教程用的软件、技术和环境"></a>一、本篇教程用的软件、技术和环境</h3><ol><li>一台国外的vps，系统：CentOS 7.4；</li><li>ssh连接工具Xshell；</li><li>Shadowsocks客户端； </li></ol><h3 id="二、ssh连接到vps"><a href="#二、ssh连接到vps" class="headerlink" title="二、ssh连接到vps"></a>二、ssh连接到vps</h3><p>利用客户端软件（Xshell、Putty、SecureCRT等等）远程连接到你的国外vps。</p><h3 id="三、vps上跑脚本命令"><a href="#三、vps上跑脚本命令" class="headerlink" title="三、vps上跑脚本命令"></a>三、vps上跑脚本命令</h3><ol><li>在命令行内输入如下：</li></ol><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">wget</span><span class="token function">wget</span> -N --no-check-certificate https://raw.githubusercontent.com/CecilWu/SSR-Chinese/master/ssr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x ssr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> ssr.sh</code></pre><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/1.jpg" align="left/">此时服务器会自动安装脚本，如果脚本执行过程中没有反映，你直接回车确认即可。安装完毕后如下图所示：<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/2.jpg" align="left/">2. 输入数字1后回车安装ShadowsocksR。安装完毕后会要求你自定义端口和密码。然后回车确认，他会要求你选择加密方式，此时一般选10：aes-256-cfb。如下图所示：<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/3.jpg" align="left/">3. 然后按照下图设置协议插件、混淆插件。<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/4.jpg" align="left/">4. 配置设备数、端口限速<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/5.jpg" align="left/">5. 过段时间之后，系统会提示安装完成，同时显示SS账号的配置信息，自己保存好即可！<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/6.jpg" align="left/"><h3 id="四、安装第二个账号"><a href="#四、安装第二个账号" class="headerlink" title="四、安装第二个账号"></a>四、安装第二个账号</h3><p>如果你想返回主界面继续安装第二个帐号，可以输入下面的命令调出，然后选择“9”切换到多端口模式即可:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> ssr.sh</code></pre><p>·<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/7.jpg" align="left/"></p><h3 id="五、Shadowsocks客户端下载与配置"><a href="#五、Shadowsocks客户端下载与配置" class="headerlink" title="五、Shadowsocks客户端下载与配置"></a>五、Shadowsocks客户端下载与配置</h3><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.7.1/Shadowsocks-4.1.7.1.zip" title="点击下载" target="_blank" rel="noopener"><strong><font color="purple">Shadowsocks客户端下载地址</font></strong></a><br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/8.jpg" align="left/"><br>开启后即可愉快地玩耍了！<br><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190906/9.jpg" align="left/"></p>]]></content>
      
      
      <categories>
          
          <category> 其他教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 技术 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据教程(一)-基础配置</title>
      <link href="/2019/08/29/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/29/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%95%99%E7%A8%8B(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本篇教程侧重点导读"><a href="#一、本篇教程侧重点导读" class="headerlink" title="一、本篇教程侧重点导读"></a>一、本篇教程侧重点导读</h3><ol><li>使用VMware虚拟出几台服务器后对网络的配置，主要是为了连通物理本机和虚拟服务器；（VMware的安装，虚拟服务器比较简单，这里不再赘述）</li><li>服务器之间配置ssh免密登陆；</li><li>修改主机名以及host配置；</li><li>JDK的安装配置；</li><li>追加配置的说明；</li></ol><h3 id="二、本篇教程用的软件、技术和说明"><a href="#二、本篇教程用的软件、技术和说明" class="headerlink" title="二、本篇教程用的软件、技术和说明"></a>二、本篇教程用的软件、技术和说明</h3><ol><li>虚拟机软件VMware（如果你有几台比较好的服务器就不需要这个软件了）；</li><li>使用JDK版本：1.8.0_161；</li><li>使用到linux系统：CentOS 7.2；</li></ol><h3 id="三、服务器的网络配置"><a href="#三、服务器的网络配置" class="headerlink" title="三、服务器的网络配置"></a>三、服务器的网络配置</h3><ol><li><p>安装完VMware后，会在物理本机上多出两块虚拟网卡（VMnet1、VMnet8），一会我们需要对VMnet8配置一下；</p></li><li><p>用VMware虚拟出一台服务器之后，启动服务器后，使用命令<code>ifconfig</code>会看到有一块网卡（比如说我的就叫eth0），然后把名字记下来，在<code>/etc/sysconfig/netword-scripts</code>目录下找到这块网卡文件（linux里面万物皆文件）：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/networkCard_update.png" align="left/">将其修改配置如下（网段可自定义）：<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/networkCard_configure.png" align="left/"></li><li><p>配置完毕之后重启网络<code>service network restart</code><br><strong><font color="red">防坑：如果网卡重启失败，把网卡文件（我的是ifcfg-eth0）中的mac配置（HWADDR=xx:xx:xx:xx）项删除，再删除网卡相关信息文件<code>/etc/udev/rules.d/70-persistent-net.rules</code>,最后重启服务器<code>reboot</code></font></strong><br>至此，linux服务器配置完毕，在配置VMware的虚拟网络配置！</p></li><li><p>打开：VMware &gt; 编辑 &gt; 虚拟网络编辑器；修改名字为VMnet8的那块网卡，将子网ip改为广播地址：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/ipaddr_update.png" align="left/">点击应用之后，VMware会自动将`192.168.6.1`配置成为你的物理机VMnet8的那块网卡，将`192.168.6.2`作为网关地址，如下两图：<img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/localhost_explain.png" align="left/"><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/look_default_gateway.png" align="left/"><p><strong><font color="green">启动服务器之后查看ip地址时就是你在ifcfg-eth0文件中配置的ip地址，并且可以从物理机（192.168.6.1）ping通你的服务器（192.168.6.101），此时第一台虚拟机配置完成，你可以使用VMware自带的克隆功能多克隆几台服务器，需要注意的是：克隆出来的服务器的ip地址、mac地址和被克隆的服务器会冲突，需要重新修改一下</font></strong></p></li><li><p>重新生成克隆出来的每一台服务器的mac地址：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/createMAC.png" align="left/"></li><li><p>启动每一台克隆出来的服务器并且修改其ip地址：打开<code>/etc/sysconfig/netword-scripts/ifcfg-eth0</code>文件 将IPADDR 修改成新的ip地址并重启；<br>到此，所有服务器的网络配置完成！</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/network_completed.png" align="left/"></li></ol><h3 id="四、修改主机名、配置host"><a href="#四、修改主机名、配置host" class="headerlink" title="四、修改主机名、配置host"></a>四、修改主机名、配置host</h3><ol><li><p>主机名：修改每一台机器上的配置文件<code>/etc/hostname</code>，并重启；</p></li><li><p>配置域名：修改<code>192.168.6.100</code>机器上面配置文件：<code>/etc/hosts</code>,修改完成后，如图所示：</p><img style="width:85%;height:85%" src="http://staticfile.erdongchen.top/blog/blogPicture/20190829/hosts_update.png" align="left/"><p><strong><font color="green">配置域名的作用是：在后面学习大数据的时候，会频繁使用到各个服务器的ip地址，配置成域名之后方面管理和记忆</font></strong></p></li><li><p>将100上面的hosts文件覆盖到其他机器上面：<code>scp hosts root@192.168.6.101:/etc/</code><br><strong><font color="red">说明：<br>在后面博客中将称<code>192.168.6.100</code>为<code>master</code><br>在后面博客中将称<code>192.168.6.101</code>为<code>slave1</code><br>在后面博客中将称<code>192.168.6.102</code>为<code>slave2</code><br>在后面博客中将称<code>192.168.6.103</code>为<code>slave3</code><br>在后面博客中将称<code>192.168.6.104</code>为<code>slave4</code><br></font></strong></p></li></ol><h3 id="五、ssh免密登陆"><a href="#五、ssh免密登陆" class="headerlink" title="五、ssh免密登陆"></a>五、ssh免密登陆</h3><ol><li><p>在master上输入：<code>ssh-keygen -t rsa -b 4096</code>，此时会在当前登录用户家目录下生成.ssh文件夹,里面会有一对秘钥，查看命令<code>ll ~/.ssh</code>；</p><p><strong><font color="green">参数说明：<br>-t type 指定要创建的密钥类型。可以使用：”rsa1”(SSH-1) “rsa”(SSH-2) “dsa”(SSH-2)<br>-b bits 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</font></strong></p></li><li><p>接着输入<code>ssh-copy-id -i ~/.ssh/id_rsa.pub root@slave1</code>，这时会让你输入slave1的root账号密码，这句命令的效果是将刚刚生成的id_rsa.pub里面的信息追加到101服务器上/root/.ssh目录下的authorized_keys文件中；</p><p><strong><font color="green">这时就可以从master免密登录到slave1上了：<code>ssh root@slave1</code> </font></strong><br><strong><font color="red">注意：如果还需要从slave1免密登录到master，则需要在slave1服务器上执行第1和2两步</font></strong><br>你还可以将所有的服务器配置成互为免密登录，配置成互为免密登录之后，方便后面学习大数据的时候少踩坑；<br>后面在hdfs集群启动的时候，还需要将自己和自己配置成免密登录，不然会有问题。</p></li></ol><h3 id="六、JDK的安装配置"><a href="#六、JDK的安装配置" class="headerlink" title="六、JDK的安装配置"></a>六、JDK的安装配置</h3><ol><li><p>将事先准备好的jdk的tar.gz包上传到master上解压：<code>tar -xzvf jdk-8u161-linux-x64.tar.gz -C /usr/local/</code></p><p><strong><font color="green">-C 解压文件到指定的目录 </font></strong></p></li><li><p>编辑配置环境变量<code>vim /etc/profile</code>,添加如下配置：</p><pre class=" language-java"><code class="language-java">JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_161CLASSPATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>binexport PATH JAVA_HOME CLASSPATH</code></pre></li><li><p>执行命令 ：<code>source /etc/profile</code></p></li><li><p>查看安装情况<code>java -version</code></p><p><strong><font color="red">JDK在每台机器上都需要安装！</font></strong></p></li></ol><h3 id="七、追加配置的说明（2019-11-27）"><a href="#七、追加配置的说明（2019-11-27）" class="headerlink" title="七、追加配置的说明（2019.11.27）"></a>七、追加配置的说明（2019.11.27）</h3><p> 由于后面要建立完成的大数据平台，所以追加本节内容，用于说明后面搭建的集群规划</p><ol><li>新增了一台服务器<code>192.168.6.105</code>和前面服务器一样需要配置免密、JDK等基础配置；</li><li>集群规划：<table><thead><tr><th align="center">主机名</th><th align="center">IP</th><th align="center">安装的软件</th><th align="center">运行的进程</th></tr></thead><tbody><tr><td align="center">master</td><td align="center">192.168.6.100</td><td align="center">jdk、hadoop</td><td align="center">NameNode、DFSZKFailoverController(zkfc)</td></tr><tr><td align="center">slave1</td><td align="center">192.168.6.101</td><td align="center">jdk、hadoop</td><td align="center">NameNode、DFSZKFailoverController(zkfc)、ResourceManager</td></tr><tr><td align="center">slave2</td><td align="center">192.168.6.102</td><td align="center">jdk、hadoop</td><td align="center">ResourceManager</td></tr><tr><td align="center">slave3</td><td align="center">192.168.6.103</td><td align="center">jdk、hadoop、zookeeper</td><td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain</td></tr><tr><td align="center">slave4</td><td align="center">192.168.6.104</td><td align="center">jdk、hadoop、zookeeper</td><td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain</td></tr><tr><td align="center">slave5</td><td align="center">192.168.6.105</td><td align="center">jdk、hadoop、zookeeper</td><td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开通博客的第一天干嘛？当然是手把手教你如何搭建博客啦！</title>
      <link href="/2019/08/15/howToCreateBlog/"/>
      <url>/2019/08/15/howToCreateBlog/</url>
      
        <content type="html"><![CDATA[<h3 id="本套博客搭建教程的前置条件："><a href="#本套博客搭建教程的前置条件：" class="headerlink" title="本套博客搭建教程的前置条件："></a>本套博客搭建教程的前置条件：</h3><ol><li>域名一个；</li><li>github账号一个；</li><li>本机已安装node.js；</li><li>本机已安装git，并且本地仓库已关联到自己github上的一个repository，且repository的名字必须为‘你的github账号.github.io’</li></ol><h3 id="下面进入本教程："><a href="#下面进入本教程：" class="headerlink" title="下面进入本教程："></a>下面进入本教程：</h3><p><strong>基础部分</strong></p><ol><li>切换国内源  <code>npm config set registry=&quot;http://registry.cnpmjs.org&quot;</code></li><li>安装hexo  <code>npm install -g hexo</code></li><li>初始化Hexo  <code>hexo init</code></li><li>安装必要的模块  <code>npm install</code></li><li>生成静态文件  <code>hexo g  或者  hexo generate</code></li><li>本地测试（浏览器查看：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>）  <code>hexo s  或者  hexo server</code></li></ol><p><strong>个性化设置</strong></p><ol><li><p>hexo配置文件修改，在根目录下（执行hexo init的那个目录）会有一个_config.yml的配置文件，修改如下内容：</p><pre class=" language-java"><code class="language-java"># Hexo Configuration# Docs<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>docs<span class="token operator">/</span>configuration<span class="token punctuation">.</span>html# Source<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>hexojs<span class="token operator">/</span>hexo<span class="token operator">/</span>Sitetitle<span class="token operator">:</span> 换成你的主页标题subtitle<span class="token operator">:</span> 主页副标题description<span class="token operator">:</span> 主页介绍的一句话author<span class="token operator">:</span> 你的名字language<span class="token operator">:</span> zh<span class="token operator">-</span>CN #语言timezone<span class="token operator">:</span> Asia<span class="token operator">/</span>Shanghai #时区##    # URL#    ## If your site is put in a subdirectory<span class="token punctuation">,</span>#    ##set url as <span class="token string">'http://yoursite.com/child'</span> and root as <span class="token string">'/child/'</span>#    # 更换域名是需要配置的参数url<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>voidking<span class="token punctuation">.</span>comroot<span class="token operator">:</span> <span class="token operator">/</span>##    # Extensions#    ## Plugins<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>plugins<span class="token operator">/</span>#    ## Themes<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>themes<span class="token operator">/</span>theme<span class="token operator">:</span> 你用的主题文件夹名字 # themes下的文件##    # Deployment#    ## Docs<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>docs<span class="token operator">/</span>deployment<span class="token punctuation">.</span>htmldeploy<span class="token operator">:</span>    type<span class="token operator">:</span> git    # GitHub仓库地址，此地址一定要是前置条件第四条的那个地址    # 地址格式：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>你的github账号<span class="token operator">/</span>你的github账号<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git    # 例如    repository<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>a878804506<span class="token operator">/</span>a878804506<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git    branch<span class="token operator">:</span> master</code></pre><p><strong><font color="red">防坑：_config.yml配置参数时，注意冒号后面一定要有一个空格</font></strong></p></li><li><p>修改主题<br>找一个自己喜欢的主题，然后clone到hexo根目录下的themes目录下<br>eg：切换到根目录下文件下，cmd执行<br><code>git clone -b master https://github.com/lewis-geek/hexo-theme-Aath.git themes/aath</code><br>下载好后，你在_config.yml（主题是根目录下的）中的theme:处配置成你下在的主题名字（就是下载的主题文件夹名字 ）</p></li><li><p>上传的github上（会上传到前置条件第四条的那个地址下）<br>如果想把原来的清除 <code>hexo clean</code><br>重新生成静态文件 <code>hexo g</code><br>上传到提交文件 <code>hexo d</code><br>此时就可以用浏览器访问前置条件第四条的那个地址，会就出现你的博客首页</p></li></ol><p><strong>附加:域名配置</strong></p><ol><li>到你域名提供商那里配置域名解析规则,记录类型为：CNAME</li><li>记录值为：前置条件第四条的那个地址</li><li>Hexo根目录下会有一个source目录，在source下新建一个CNAME文件，文件内容是你刚刚配置好的域名</li><li>再次修改Hexo根目录下的_config.yml配置文件，填写url</li><li>再次执行打包上传命令 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br><strong><font color="red">防坑：域名访问404，但是xxx.github.io能访问，那就说明还是你的域名配置有问题，仔细检查</font></strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
